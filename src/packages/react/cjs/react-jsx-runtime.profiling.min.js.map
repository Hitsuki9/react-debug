{"version":3,"file":"react-jsx-runtime.profiling.min.js","sources":["../../../../packages/shared/ReactSymbols.js","../../../../packages/shared/ReactSharedInternals.js","../../../../packages/shared/ReactComponentStackFrame.js","../../../../packages/shared/hasOwnProperty.js","../../../../packages/shared/checkPropTypes.js","../../../../packages/react/src/jsx/ReactJSXElement.js","../../../../packages/react/src/jsx/ReactJSXElementValidator.js","../../../../packages/react/src/jsx/ReactJSX.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types.\nexport const REACT_ELEMENT_TYPE: symbol = Symbol.for('react.element');\nexport const REACT_PORTAL_TYPE: symbol = Symbol.for('react.portal');\nexport const REACT_FRAGMENT_TYPE: symbol = Symbol.for('react.fragment');\nexport const REACT_STRICT_MODE_TYPE: symbol = Symbol.for('react.strict_mode');\nexport const REACT_PROFILER_TYPE: symbol = Symbol.for('react.profiler');\nexport const REACT_PROVIDER_TYPE: symbol = Symbol.for('react.provider');\nexport const REACT_CONTEXT_TYPE: symbol = Symbol.for('react.context');\nexport const REACT_SERVER_CONTEXT_TYPE: symbol = Symbol.for(\n  'react.server_context',\n);\nexport const REACT_FORWARD_REF_TYPE: symbol = Symbol.for('react.forward_ref');\nexport const REACT_SUSPENSE_TYPE: symbol = Symbol.for('react.suspense');\nexport const REACT_SUSPENSE_LIST_TYPE: symbol = Symbol.for(\n  'react.suspense_list',\n);\nexport const REACT_MEMO_TYPE: symbol = Symbol.for('react.memo');\nexport const REACT_LAZY_TYPE: symbol = Symbol.for('react.lazy');\nexport const REACT_SCOPE_TYPE: symbol = Symbol.for('react.scope');\nexport const REACT_DEBUG_TRACING_MODE_TYPE: symbol = Symbol.for(\n  'react.debug_trace_mode',\n);\nexport const REACT_OFFSCREEN_TYPE: symbol = Symbol.for('react.offscreen');\nexport const REACT_LEGACY_HIDDEN_TYPE: symbol = Symbol.for(\n  'react.legacy_hidden',\n);\nexport const REACT_CACHE_TYPE: symbol = Symbol.for('react.cache');\nexport const REACT_TRACING_MARKER_TYPE: symbol = Symbol.for(\n  'react.tracing_marker',\n);\nexport const REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED: symbol = Symbol.for(\n  'react.default_value',\n);\n\nexport const REACT_MEMO_CACHE_SENTINEL: symbol = Symbol.for(\n  'react.memo_cache_sentinel',\n);\n\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<any> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  enableComponentStackLocations,\n  disableNativeComponentFrames,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (disableNativeComponentFrames || !fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        // $FlowFixMe[prop-missing] found when upgrading Flow\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      // TODO(luna): This will currently only throw if the function component\n      // tries to access React/ReactDOM/props. We should probably make this throw\n      // in simple components too\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                let frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n                if (fn.displayName && frame.includes('<anonymous>')) {\n                  frame = frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// $FlowFixMe[method-unbinding]\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\nimport {REACT_ELEMENT_TYPE} from 'shared/ReactSymbols';\nimport {checkKeyStringCoercion} from 'shared/CheckStringCoercion';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nconst RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true,\n};\n\nlet specialPropKeyWarningShown;\nlet specialPropRefWarningShown;\nlet didWarnAboutStringRefs;\n\nif (__DEV__) {\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'ref')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'key')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  if (__DEV__) {\n    if (\n      typeof config.ref === 'string' &&\n      ReactCurrentOwner.current &&\n      self &&\n      ReactCurrentOwner.current.stateNode !== self\n    ) {\n      const componentName = getComponentNameFromType(\n        ReactCurrentOwner.current.type,\n      );\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        console.error(\n          'Component \"%s\" contains the string ref \"%s\". ' +\n            'Support for string refs will be removed in a future major release. ' +\n            'This case cannot be automatically converted to an arrow function. ' +\n            'We ask you to manually fix this case by using useRef() or createRef() instead. ' +\n            'Learn more about using refs safely here: ' +\n            'https://reactjs.org/link/strict-mode-string-ref',\n          getComponentNameFromType(ReactCurrentOwner.current.type),\n          config.ref,\n        );\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  if (__DEV__) {\n    const warnAboutAccessingKey = function() {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n        console.error(\n          '%s: `key` is not a prop. Trying to access it will result ' +\n            'in `undefined` being returned. If you need to access the same ' +\n            'value within the child component, you should pass it as a different ' +\n            'prop. (https://reactjs.org/link/special-props)',\n          displayName,\n        );\n      }\n    };\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true,\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  if (__DEV__) {\n    const warnAboutAccessingRef = function() {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n        console.error(\n          '%s: `ref` is not a prop. Trying to access it will result ' +\n            'in `undefined` being returned. If you need to access the same ' +\n            'value within the child component, you should pass it as a different ' +\n            'prop. (https://reactjs.org/link/special-props)',\n          displayName,\n        );\n      }\n    };\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true,\n    });\n  }\n}\n\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\nconst ReactElement = function(type, key, ref, self, source, owner, props) {\n  const element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type,\n    key,\n    ref,\n    props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner,\n  };\n\n  if (__DEV__) {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false,\n    });\n    // self and source are DEV only properties.\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self,\n    });\n    // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source,\n    });\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\nexport function jsx(type, config, maybeKey) {\n  let propName;\n\n  // Reserved names are extracted\n  const props = {};\n\n  let key = null;\n  let ref = null;\n\n  // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n  if (maybeKey !== undefined) {\n    if (__DEV__) {\n      checkKeyStringCoercion(maybeKey);\n    }\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    if (__DEV__) {\n      checkKeyStringCoercion(config.key);\n    }\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  }\n\n  // Remaining properties are added to a new props object\n  for (propName in config) {\n    if (\n      hasOwnProperty.call(config, propName) &&\n      !RESERVED_PROPS.hasOwnProperty(propName)\n    ) {\n      props[propName] = config[propName];\n    }\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return ReactElement(\n    type,\n    key,\n    ref,\n    undefined,\n    undefined,\n    ReactCurrentOwner.current,\n    props,\n  );\n}\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\nexport function jsxDEV(type, config, maybeKey, source, self) {\n  if (__DEV__) {\n    let propName;\n\n    // Reserved names are extracted\n    const props = {};\n\n    let key = null;\n    let ref = null;\n\n    // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n    if (maybeKey !== undefined) {\n      if (__DEV__) {\n        checkKeyStringCoercion(maybeKey);\n      }\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    }\n\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (\n        hasOwnProperty.call(config, propName) &&\n        !RESERVED_PROPS.hasOwnProperty(propName)\n      ) {\n        props[propName] = config[propName];\n      }\n    }\n\n    // Resolve default props\n    if (type && type.defaultProps) {\n      const defaultProps = type.defaultProps;\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      const displayName =\n        typeof type === 'function'\n          ? type.displayName || type.name || 'Unknown'\n          : type;\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(\n      type,\n      key,\n      ref,\n      self,\n      source,\n      ReactCurrentOwner.current,\n      props,\n    );\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\nimport isValidElementType from 'shared/isValidElementType';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport checkPropTypes from 'shared/checkPropTypes';\nimport {\n  getIteratorFn,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_ELEMENT_TYPE,\n} from 'shared/ReactSymbols';\nimport {warnAboutSpreadingKeyToJSX} from 'shared/ReactFeatureFlags';\nimport hasOwnProperty from 'shared/hasOwnProperty';\nimport isArray from 'shared/isArray';\nimport {jsxDEV} from './ReactJSXElement';\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nlet propTypesMisspellWarningShown;\n\nif (__DEV__) {\n  propTypesMisspellWarningShown = false;\n}\n\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\nexport function isValidElement(object) {\n  if (__DEV__) {\n    return (\n      typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE\n    );\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (__DEV__) {\n    if (ReactCurrentOwner.current) {\n      const name = getComponentNameFromType(ReactCurrentOwner.current.type);\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (__DEV__) {\n    if (source !== undefined) {\n      const fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      const lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n    return '';\n  }\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nconst ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  if (__DEV__) {\n    let info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      const parentName =\n        typeof parentType === 'string'\n          ? parentType\n          : parentType.displayName || parentType.name;\n      if (parentName) {\n        info = `\\n\\nCheck the top-level render call using <${parentName}>.`;\n      }\n    }\n    return info;\n  }\n}\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (__DEV__) {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n    element._store.validated = true;\n\n    const currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;\n\n    // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n    let childOwner = '';\n    if (\n      element &&\n      element._owner &&\n      element._owner !== ReactCurrentOwner.current\n    ) {\n      // Give the component that originally created this child.\n      childOwner = ` It was passed a child from ${getComponentNameFromType(\n        element._owner.type,\n      )}.`;\n    }\n\n    setCurrentlyValidatingElement(element);\n    console.error(\n      'Each child in a list should have a unique \"key\" prop.' +\n        '%s%s See https://reactjs.org/link/warning-keys for more information.',\n      currentComponentErrorInfo,\n      childOwner,\n    );\n    setCurrentlyValidatingElement(null);\n  }\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (__DEV__) {\n    if (typeof node !== 'object') {\n      return;\n    }\n    if (isArray(node)) {\n      for (let i = 0; i < node.length; i++) {\n        const child = node[i];\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      const iteratorFn = getIteratorFn(node);\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          const iterator = iteratorFn.call(node);\n          let step;\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\nfunction validatePropTypes(element) {\n  if (__DEV__) {\n    const type = element.type;\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n    let propTypes;\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (\n      typeof type === 'object' &&\n      (type.$$typeof === REACT_FORWARD_REF_TYPE ||\n        // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        type.$$typeof === REACT_MEMO_TYPE)\n    ) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      const name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true;\n      // Intentionally inside to avoid triggering lazy initializers:\n      const name = getComponentNameFromType(type);\n      console.error(\n        'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',\n        name || 'Unknown',\n      );\n    }\n    if (\n      typeof type.getDefaultProps === 'function' &&\n      !type.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps is only used on classic React.createClass ' +\n          'definitions. Use a static property named `defaultProps` instead.',\n      );\n    }\n  }\n}\n\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\nfunction validateFragmentProps(fragment) {\n  if (__DEV__) {\n    const keys = Object.keys(fragment.props);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n        console.error(\n          'Invalid prop `%s` supplied to `React.Fragment`. ' +\n            'React.Fragment can only have `key` and `children` props.',\n          key,\n        );\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n      console.error('Invalid attribute `ref` supplied to `React.Fragment`.');\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nconst didWarnAboutKeySpread = {};\n\nexport function jsxWithValidation(\n  type,\n  props,\n  key,\n  isStaticChildren,\n  source,\n  self,\n) {\n  if (__DEV__) {\n    const validType = isValidElementType(type);\n\n    // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n    if (!validType) {\n      let info = '';\n      if (\n        type === undefined ||\n        (typeof type === 'object' &&\n          type !== null &&\n          Object.keys(type).length === 0)\n      ) {\n        info +=\n          ' You likely forgot to export your component from the file ' +\n          \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      const sourceInfo = getSourceInfoErrorAddendum(source);\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      let typeString;\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = `<${getComponentNameFromType(type.type) || 'Unknown'} />`;\n        info =\n          ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      console.error(\n        'React.jsx: type is invalid -- expected a string (for ' +\n          'built-in components) or a class/function (for composite ' +\n          'components) but got: %s.%s',\n        typeString,\n        info,\n      );\n    }\n\n    const element = jsxDEV(type, props, key, source, self);\n\n    // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n    if (element == null) {\n      return element;\n    }\n\n    // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n    if (validType) {\n      const children = props.children;\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (let i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            console.error(\n              'React.jsx: Static children should always be an array. ' +\n                'You are likely explicitly calling React.jsxs or React.jsxDEV. ' +\n                'Use the Babel transform instead.',\n            );\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (warnAboutSpreadingKeyToJSX) {\n      if (hasOwnProperty.call(props, 'key')) {\n        const componentName = getComponentNameFromType(type);\n        const keys = Object.keys(props).filter(k => k !== 'key');\n        const beforeExample =\n          keys.length > 0\n            ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}'\n            : '{key: someKey}';\n        if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n          const afterExample =\n            keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n' +\n              '  let props = %s;\\n' +\n              '  <%s {...props} />\\n' +\n              'React keys must be passed directly to JSX without using spread:\\n' +\n              '  let props = %s;\\n' +\n              '  <%s key={someKey} {...props} />',\n            beforeExample,\n            componentName,\n            afterExample,\n            componentName,\n          );\n          didWarnAboutKeySpread[componentName + beforeExample] = true;\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n}\n\n// These two functions exist to still get child warnings in dev\n// even with the prod transform. This means that jsxDEV is purely\n// opt-in behavior for better messages but that we won't stop\n// giving you warnings if you use production apis.\nexport function jsxWithValidationStatic(type, props, key) {\n  if (__DEV__) {\n    return jsxWithValidation(type, props, key, true);\n  }\n}\n\nexport function jsxWithValidationDynamic(type, props, key) {\n  if (__DEV__) {\n    return jsxWithValidation(type, props, key, false);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport {REACT_FRAGMENT_TYPE} from 'shared/ReactSymbols';\nimport {\n  jsxWithValidationStatic,\n  jsxWithValidationDynamic,\n  jsxWithValidation,\n} from './ReactJSXElementValidator';\nimport {jsx as jsxProd} from './ReactJSXElement';\nconst jsx: any = __DEV__ ? jsxWithValidationDynamic : jsxProd;\n// we may want to special case jsxs internally to take advantage of static children.\n// for now we can ship identical prod functions\nconst jsxs: any = __DEV__ ? jsxWithValidationStatic : jsxProd;\nconst jsxDEV: any = __DEV__ ? jsxWithValidation : undefined;\n\nexport {REACT_FRAGMENT_TYPE as Fragment, jsx, jsxs, jsxDEV};\n"],"names":["REACT_ELEMENT_TYPE","Symbol","for","REACT_FRAGMENT_TYPE","ReactSharedInternals","React","ReactCurrentDispatcher","hasOwnProperty","Object","prototype","ReactDebugCurrentFrame","ReactCurrentOwner","RESERVED_PROPS","key","ref","__self","__source","hasValidRef","config","undefined","hasValidKey","ReactElement","type","self","source","owner","props","element","$$typeof","_owner","jsx","maybeKey","propName","call","defaultProps","current","__DEV__","jsxProd","jsxs"],"mappings":"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"}