{"version":3,"file":"react.production.js","sources":["../../../../packages/shared/ReactVersion.js","../../../../packages/shared/ReactSymbols.js","../../../../packages/react/src/ReactNoopUpdateQueue.js","../../../../packages/shared/assign.js","../../../../packages/react/src/ReactBaseClasses.js","../../../../packages/react/src/ReactCreateRef.js","../../../../packages/shared/isArray.js","../../../../packages/react/src/ReactSharedInternalsClient.js","../../../../packages/shared/hasOwnProperty.js","../../../../packages/react/src/jsx/ReactJSXElement.js","../../../../packages/react/src/ReactChildren.js","../../../../packages/react/src/ReactContext.js","../../../../packages/react/src/ReactLazy.js","../../../../packages/react/src/ReactForwardRef.js","../../../../packages/react/src/ReactMemo.js","../../../../packages/react/src/ReactCacheClient.js","../../../../packages/react/src/ReactHooks.js","../../../../packages/shared/reportGlobalError.js","../../../../packages/react/src/ReactStartTransition.js","../../../../packages/react/src/ReactAct.js","../../../../packages/react/src/ReactCompilerRuntime.js","../../../../packages/react/src/ReactClient.js"],"sourcesContent":["export default '19.0.0-rc-7283a213-20241206';\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {renameElementSymbol} from 'shared/ReactFeatureFlags';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types.\nexport const REACT_LEGACY_ELEMENT_TYPE: symbol = Symbol.for('react.element');\nexport const REACT_ELEMENT_TYPE: symbol = renameElementSymbol\n  ? Symbol.for('react.transitional.element')\n  : REACT_LEGACY_ELEMENT_TYPE;\nexport const REACT_PORTAL_TYPE: symbol = Symbol.for('react.portal');\nexport const REACT_FRAGMENT_TYPE: symbol = Symbol.for('react.fragment');\nexport const REACT_STRICT_MODE_TYPE: symbol = Symbol.for('react.strict_mode');\nexport const REACT_PROFILER_TYPE: symbol = Symbol.for('react.profiler');\nexport const REACT_PROVIDER_TYPE: symbol = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\nexport const REACT_CONSUMER_TYPE: symbol = Symbol.for('react.consumer');\nexport const REACT_CONTEXT_TYPE: symbol = Symbol.for('react.context');\nexport const REACT_FORWARD_REF_TYPE: symbol = Symbol.for('react.forward_ref');\nexport const REACT_SUSPENSE_TYPE: symbol = Symbol.for('react.suspense');\nexport const REACT_SUSPENSE_LIST_TYPE: symbol = Symbol.for(\n  'react.suspense_list',\n);\nexport const REACT_MEMO_TYPE: symbol = Symbol.for('react.memo');\nexport const REACT_LAZY_TYPE: symbol = Symbol.for('react.lazy');\nexport const REACT_SCOPE_TYPE: symbol = Symbol.for('react.scope');\nexport const REACT_DEBUG_TRACING_MODE_TYPE: symbol = Symbol.for(\n  'react.debug_trace_mode',\n);\nexport const REACT_OFFSCREEN_TYPE: symbol = Symbol.for('react.offscreen');\nexport const REACT_LEGACY_HIDDEN_TYPE: symbol = Symbol.for(\n  'react.legacy_hidden',\n);\nexport const REACT_TRACING_MARKER_TYPE: symbol = Symbol.for(\n  'react.tracing_marker',\n);\n\nexport const REACT_MEMO_CACHE_SENTINEL: symbol = Symbol.for(\n  'react.memo_cache_sentinel',\n);\n\nexport const REACT_POSTPONE_TYPE: symbol = Symbol.for('react.postpone');\n\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<any> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n\nexport const ASYNC_ITERATOR = Symbol.asyncIterator;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  if (__DEV__) {\n    const constructor = publicInstance.constructor;\n    const componentName =\n      (constructor && (constructor.displayName || constructor.name)) ||\n      'ReactClass';\n    const warningKey = `${componentName}.${callerName}`;\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n    console.error(\n      \"Can't call %s on a component that is not yet mounted. \" +\n        'This is a no-op, but it might indicate a bug in your application. ' +\n        'Instead, assign to `this.state` directly or define a `state = {};` ' +\n        'class property with the desired state in the %s component.',\n      callerName,\n      componentName,\n    );\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nconst ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (\n    publicInstance,\n    completeState,\n    callback,\n    callerName,\n  ) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (\n    publicInstance,\n    partialState,\n    callback,\n    callerName,\n  ) {\n    warnNoop(publicInstance, 'setState');\n  },\n};\n\nexport default ReactNoopUpdateQueue;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst assign = Object.assign;\n\nexport default assign;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport ReactNoopUpdateQueue from './ReactNoopUpdateQueue';\nimport assign from 'shared/assign';\n\nconst emptyObject = {};\nif (__DEV__) {\n  Object.freeze(emptyObject);\n}\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  // If a component has string refs, we will assign a different object later.\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nComponent.prototype.setState = function (partialState, callback) {\n  if (\n    typeof partialState !== 'object' &&\n    typeof partialState !== 'function' &&\n    partialState != null\n  ) {\n    throw new Error(\n      'takes an object of state variables to update or a ' +\n        'function which returns an object of state variables.',\n    );\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (__DEV__) {\n  const deprecatedAPIs = {\n    isMounted: [\n      'isMounted',\n      'Instead, make sure to clean up subscriptions and pending requests in ' +\n        'componentWillUnmount to prevent memory leaks.',\n    ],\n    replaceState: [\n      'replaceState',\n      'Refactor your code to use setState instead (see ' +\n        'https://github.com/facebook/react/issues/3236).',\n    ],\n  };\n  const defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        console.warn(\n          '%s(...) is deprecated in plain JavaScript React classes. %s',\n          info[0],\n          info[1],\n        );\n        return undefined;\n      },\n    });\n  };\n  for (const fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\nComponentDummy.prototype = Component.prototype;\n\n/**\n * Convenience component with default shallow equality check for sCU.\n */\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  // If a component has string refs, we will assign a different object later.\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nconst pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());\npureComponentPrototype.constructor = PureComponent;\n// Avoid an extra prototype jump for these methods.\nassign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\nexport {Component, PureComponent};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * @flow\n */\n\nimport type {RefObject} from 'shared/ReactTypes';\n\n// an immutable object with a single mutable value\nexport function createRef(): RefObject {\n  const refObject = {\n    current: null,\n  };\n  if (__DEV__) {\n    Object.seal(refObject);\n  }\n  return refObject;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\ndeclare function isArray(a: mixed): boolean %checks(Array.isArray(a));\n\nconst isArrayImpl = Array.isArray;\n\nfunction isArray(a: mixed): boolean {\n  return isArrayImpl(a);\n}\n\nexport default isArray;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Dispatcher} from 'react-reconciler/src/ReactInternalTypes';\nimport type {AsyncDispatcher} from 'react-reconciler/src/ReactInternalTypes';\nimport type {BatchConfigTransition} from 'react-reconciler/src/ReactFiberTracingMarkerComponent';\n\nexport type SharedStateClient = {\n  H: null | Dispatcher, // ReactCurrentDispatcher for Hooks\n  A: null | AsyncDispatcher, // ReactCurrentCache for Cache\n  T: null | BatchConfigTransition, // ReactCurrentBatchConfig for Transitions\n  S: null | ((BatchConfigTransition, mixed) => void), // onStartTransitionFinish\n\n  // DEV-only\n\n  // ReactCurrentActQueue\n  actQueue: null | Array<RendererTask>,\n\n  // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n  isBatchingLegacy: boolean,\n  didScheduleLegacyUpdate: boolean,\n\n  // Tracks whether something called `use` during the current batch of work.\n  // Determines whether we should yield to microtasks to unwrap already resolved\n  // promises without suspending.\n  didUsePromise: boolean,\n\n  // Track first uncaught error within this act\n  thrownErrors: Array<mixed>,\n\n  // ReactDebugCurrentFrame\n  getCurrentStack: null | (() => string),\n};\n\nexport type RendererTask = boolean => RendererTask | null;\n\nconst ReactSharedInternals: SharedStateClient = ({\n  H: null,\n  A: null,\n  T: null,\n  S: null,\n}: any);\n\nif (__DEV__) {\n  ReactSharedInternals.actQueue = null;\n  ReactSharedInternals.isBatchingLegacy = false;\n  ReactSharedInternals.didScheduleLegacyUpdate = false;\n  ReactSharedInternals.didUsePromise = false;\n  ReactSharedInternals.thrownErrors = [];\n  // Stack implementation injected by the current renderer.\n  ReactSharedInternals.getCurrentStack = (null: null | (() => string));\n}\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// $FlowFixMe[method-unbinding]\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\nimport assign from 'shared/assign';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\nimport {checkKeyStringCoercion} from 'shared/CheckStringCoercion';\nimport isValidElementType from 'shared/isValidElementType';\nimport isArray from 'shared/isArray';\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\nimport {\n  disableDefaultPropsExceptForClasses,\n  enableOwnerStacks,\n} from 'shared/ReactFeatureFlags';\n\nconst REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n\nconst createTask =\n  // eslint-disable-next-line react-internal/no-production-logging\n  __DEV__ && enableOwnerStacks && console.createTask\n    ? // eslint-disable-next-line react-internal/no-production-logging\n      console.createTask\n    : () => null;\n\nfunction getTaskName(type) {\n  if (type === REACT_FRAGMENT_TYPE) {\n    return '<>';\n  }\n  if (\n    typeof type === 'object' &&\n    type !== null &&\n    type.$$typeof === REACT_LAZY_TYPE\n  ) {\n    // We don't want to eagerly initialize the initializer in DEV mode so we can't\n    // call it to extract the type so we don't know the type of this component.\n    return '<...>';\n  }\n  try {\n    const name = getComponentNameFromType(type);\n    return name ? '<' + name + '>' : '<...>';\n  } catch (x) {\n    return '<...>';\n  }\n}\n\nfunction getOwner() {\n  if (__DEV__) {\n    const dispatcher = ReactSharedInternals.A;\n    if (dispatcher === null) {\n      return null;\n    }\n    return dispatcher.getOwner();\n  }\n  return null;\n}\n\nlet specialPropKeyWarningShown;\nlet didWarnAboutElementRef;\nlet didWarnAboutOldJSXRuntime;\n\nif (__DEV__) {\n  didWarnAboutElementRef = {};\n}\n\nfunction hasValidRef(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'ref')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'key')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  if (__DEV__) {\n    const warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n        console.error(\n          '%s: `key` is not a prop. Trying to access it will result ' +\n            'in `undefined` being returned. If you need to access the same ' +\n            'value within the child component, you should pass it as a different ' +\n            'prop. (https://react.dev/link/special-props)',\n          displayName,\n        );\n      }\n    };\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true,\n    });\n  }\n}\n\nfunction elementRefGetterWithDeprecationWarning() {\n  if (__DEV__) {\n    const componentName = getComponentNameFromType(this.type);\n    if (!didWarnAboutElementRef[componentName]) {\n      didWarnAboutElementRef[componentName] = true;\n      console.error(\n        'Accessing element.ref was removed in React 19. ref is now a ' +\n          'regular prop. It will be removed from the JSX Element ' +\n          'type in a future release.',\n      );\n    }\n\n    // An undefined `element.ref` is coerced to `null` for\n    // backwards compatibility.\n    const refProp = this.props.ref;\n    return refProp !== undefined ? refProp : null;\n  }\n}\n\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.transitional.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\nfunction ReactElement(\n  type,\n  key,\n  self,\n  source,\n  owner,\n  props,\n  debugStack,\n  debugTask,\n) {\n  // Ignore whatever was passed as the ref argument and treat `props.ref` as\n  // the source of truth. The only thing we use this for is `element.ref`,\n  // which will log a deprecation warning on access. In the next release, we\n  // can remove `element.ref` as well as the `ref` argument.\n  const refProp = props.ref;\n\n  // An undefined `element.ref` is coerced to `null` for\n  // backwards compatibility.\n  const ref = refProp !== undefined ? refProp : null;\n\n  let element;\n  if (__DEV__) {\n    // In dev, make `ref` a non-enumerable property with a warning. It's non-\n    // enumerable so that test matchers and serializers don't access it and\n    // trigger the warning.\n    //\n    // `ref` will be removed from the element completely in a future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n\n      // Built-in properties that belong on the element\n      type,\n      key,\n\n      props,\n\n      // Record the component responsible for creating this element.\n      _owner: owner,\n    };\n    if (ref !== null) {\n      Object.defineProperty(element, 'ref', {\n        enumerable: false,\n        get: elementRefGetterWithDeprecationWarning,\n      });\n    } else {\n      // Don't warn on access if a ref is not given. This reduces false\n      // positives in cases where a test serializer uses\n      // getOwnPropertyDescriptors to compare objects, like Jest does, which is\n      // a problem because it bypasses non-enumerability.\n      //\n      // So unfortunately this will trigger a false positive warning in Jest\n      // when the diff is printed:\n      //\n      //   expect(<div ref={ref} />).toEqual(<span ref={ref} />);\n      //\n      // A bit sketchy, but this is what we've done for the `props.key` and\n      // `props.ref` accessors for years, which implies it will be good enough\n      // for `element.ref`, too. Let's see if anyone complains.\n      Object.defineProperty(element, 'ref', {\n        enumerable: false,\n        value: null,\n      });\n    }\n  } else {\n    // In prod, `ref` is a regular property and _owner doesn't exist.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n\n      // Built-in properties that belong on the element\n      type,\n      key,\n      ref,\n\n      props,\n    };\n  }\n\n  if (__DEV__) {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: 0,\n    });\n    // debugInfo contains Server Component debug information.\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null,\n    });\n    if (enableOwnerStacks) {\n      Object.defineProperty(element, '_debugStack', {\n        configurable: false,\n        enumerable: false,\n        writable: true,\n        value: debugStack,\n      });\n      Object.defineProperty(element, '_debugTask', {\n        configurable: false,\n        enumerable: false,\n        writable: true,\n        value: debugTask,\n      });\n    }\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\nexport function jsxProd(type, config, maybeKey) {\n  let key = null;\n\n  // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n  if (maybeKey !== undefined) {\n    if (__DEV__) {\n      checkKeyStringCoercion(maybeKey);\n    }\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    if (__DEV__) {\n      checkKeyStringCoercion(config.key);\n    }\n    key = '' + config.key;\n  }\n\n  let props;\n  if (!('key' in config)) {\n    // If key was not spread in, we can reuse the original props object. This\n    // only works for `jsx`, not `createElement`, because `jsx` is a compiler\n    // target and the compiler always passes a new object. For `createElement`,\n    // we can't assume a new object is passed every time because it can be\n    // called manually.\n    //\n    // Spreading key is a warning in dev. In a future release, we will not\n    // remove a spread key from the props object. (But we'll still warn.) We'll\n    // always pass the object straight through.\n    props = config;\n  } else {\n    // We need to remove reserved props (key, prop, ref). Create a fresh props\n    // object and copy over all the non-reserved props. We don't use `delete`\n    // because in V8 it will deopt the object to dictionary mode.\n    props = {};\n    for (const propName in config) {\n      // Skip over reserved prop names\n      if (propName !== 'key') {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  if (!disableDefaultPropsExceptForClasses) {\n    // Resolve default props\n    if (type && type.defaultProps) {\n      const defaultProps = type.defaultProps;\n      for (const propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n  }\n\n  return ReactElement(\n    type,\n    key,\n    undefined,\n    undefined,\n    getOwner(),\n    props,\n    undefined,\n    undefined,\n  );\n}\n\n// While `jsxDEV` should never be called when running in production, we do\n// support `jsx` and `jsxs` when running in development. This supports the case\n// where a third-party dependency ships code that was compiled for production;\n// we want to still provide warnings in development.\n//\n// So these functions are the _dev_ implementations of the _production_\n// API signatures.\n//\n// Since these functions are dev-only, it's ok to add an indirection here. They\n// only exist to provide different versions of `isStaticChildren`. (We shouldn't\n// use this pattern for the prod versions, though, because it will add an call\n// frame.)\nexport function jsxProdSignatureRunningInDevWithDynamicChildren(\n  type,\n  config,\n  maybeKey,\n  source,\n  self,\n) {\n  if (__DEV__) {\n    const isStaticChildren = false;\n    return jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      __DEV__ && enableOwnerStacks ? Error('react-stack-top-frame') : undefined,\n      __DEV__ && enableOwnerStacks ? createTask(getTaskName(type)) : undefined,\n    );\n  }\n}\n\nexport function jsxProdSignatureRunningInDevWithStaticChildren(\n  type,\n  config,\n  maybeKey,\n  source,\n  self,\n) {\n  if (__DEV__) {\n    const isStaticChildren = true;\n    return jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      __DEV__ && enableOwnerStacks ? Error('react-stack-top-frame') : undefined,\n      __DEV__ && enableOwnerStacks ? createTask(getTaskName(type)) : undefined,\n    );\n  }\n}\n\nconst didWarnAboutKeySpread = {};\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\nexport function jsxDEV(type, config, maybeKey, isStaticChildren, source, self) {\n  return jsxDEVImpl(\n    type,\n    config,\n    maybeKey,\n    isStaticChildren,\n    source,\n    self,\n    __DEV__ && enableOwnerStacks ? Error('react-stack-top-frame') : undefined,\n    __DEV__ && enableOwnerStacks ? createTask(getTaskName(type)) : undefined,\n  );\n}\n\nfunction jsxDEVImpl(\n  type,\n  config,\n  maybeKey,\n  isStaticChildren,\n  source,\n  self,\n  debugStack,\n  debugTask,\n) {\n  if (__DEV__) {\n    if (!enableOwnerStacks && !isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn here so that we can get better stack traces but with enableOwnerStacks\n      // enabled we don't need this because we get good stacks if we error in the\n      // renderer anyway. The renderer is the only one that knows what types are valid\n      // for this particular renderer so we let it error there instead.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      let info = '';\n      if (\n        type === undefined ||\n        (typeof type === 'object' &&\n          type !== null &&\n          Object.keys(type).length === 0)\n      ) {\n        info +=\n          ' You likely forgot to export your component from the file ' +\n          \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      let typeString;\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = `<${getComponentNameFromType(type.type) || 'Unknown'} />`;\n        info =\n          ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      console.error(\n        'React.jsx: type is invalid -- expected a string (for ' +\n          'built-in components) or a class/function (for composite ' +\n          'components) but got: %s.%s',\n        typeString,\n        info,\n      );\n    } else {\n      // This is a valid element type.\n\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      // When enableOwnerStacks is on, we no longer need the type here so this\n      // comment is no longer true. Which is why we can run this even for invalid\n      // types.\n      const children = config.children;\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (let i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            console.error(\n              'React.jsx: Static children should always be an array. ' +\n                'You are likely explicitly calling React.jsxs or React.jsxDEV. ' +\n                'Use the Babel transform instead.',\n            );\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    // Warn about key spread regardless of whether the type is valid.\n    if (hasOwnProperty.call(config, 'key')) {\n      const componentName = getComponentNameFromType(type);\n      const keys = Object.keys(config).filter(k => k !== 'key');\n      const beforeExample =\n        keys.length > 0\n          ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}'\n          : '{key: someKey}';\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        const afterExample =\n          keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n        console.error(\n          'A props object containing a \"key\" prop is being spread into JSX:\\n' +\n            '  let props = %s;\\n' +\n            '  <%s {...props} />\\n' +\n            'React keys must be passed directly to JSX without using spread:\\n' +\n            '  let props = %s;\\n' +\n            '  <%s key={someKey} {...props} />',\n          beforeExample,\n          componentName,\n          afterExample,\n          componentName,\n        );\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    let key = null;\n\n    // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n    if (maybeKey !== undefined) {\n      if (__DEV__) {\n        checkKeyStringCoercion(maybeKey);\n      }\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n      key = '' + config.key;\n    }\n\n    let props;\n    if (!('key' in config)) {\n      // If key was not spread in, we can reuse the original props object. This\n      // only works for `jsx`, not `createElement`, because `jsx` is a compiler\n      // target and the compiler always passes a new object. For `createElement`,\n      // we can't assume a new object is passed every time because it can be\n      // called manually.\n      //\n      // Spreading key is a warning in dev. In a future release, we will not\n      // remove a spread key from the props object. (But we'll still warn.) We'll\n      // always pass the object straight through.\n      props = config;\n    } else {\n      // We need to remove reserved props (key, prop, ref). Create a fresh props\n      // object and copy over all the non-reserved props. We don't use `delete`\n      // because in V8 it will deopt the object to dictionary mode.\n      props = {};\n      for (const propName in config) {\n        // Skip over reserved prop names\n        if (propName !== 'key') {\n          props[propName] = config[propName];\n        }\n      }\n    }\n\n    if (!disableDefaultPropsExceptForClasses) {\n      // Resolve default props\n      if (type && type.defaultProps) {\n        const defaultProps = type.defaultProps;\n        for (const propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      }\n    }\n\n    if (key) {\n      const displayName =\n        typeof type === 'function'\n          ? type.displayName || type.name || 'Unknown'\n          : type;\n      defineKeyPropWarningGetter(props, displayName);\n    }\n\n    return ReactElement(\n      type,\n      key,\n      self,\n      source,\n      getOwner(),\n      props,\n      debugStack,\n      debugTask,\n    );\n  }\n}\n\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\nexport function createElement(type, config, children) {\n  if (__DEV__) {\n    if (!enableOwnerStacks && !isValidElementType(type)) {\n      // This is just an optimistic check that provides a better stack trace before\n      // owner stacks. It's really up to the renderer if it's a valid element type.\n      // When owner stacks are enabled, we instead warn in the renderer and it'll\n      // have the stack trace of the JSX element anyway.\n      //\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      let info = '';\n      if (\n        type === undefined ||\n        (typeof type === 'object' &&\n          type !== null &&\n          Object.keys(type).length === 0)\n      ) {\n        info +=\n          ' You likely forgot to export your component from the file ' +\n          \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      let typeString;\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = `<${getComponentNameFromType(type.type) || 'Unknown'} />`;\n        info =\n          ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      console.error(\n        'React.createElement: type is invalid -- expected a string (for ' +\n          'built-in components) or a class/function (for composite ' +\n          'components) but got: %s.%s',\n        typeString,\n        info,\n      );\n    } else {\n      // This is a valid element type.\n\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      for (let i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], type);\n      }\n    }\n\n    // Unlike the jsx() runtime, createElement() doesn't warn about key spread.\n  }\n\n  let propName;\n\n  // Reserved names are extracted\n  const props = {};\n\n  let key = null;\n\n  if (config != null) {\n    if (__DEV__) {\n      if (\n        !didWarnAboutOldJSXRuntime &&\n        '__self' in config &&\n        // Do not assume this is the result of an oudated JSX transform if key\n        // is present, because the modern JSX transform sometimes outputs\n        // createElement to preserve precedence between a static key and a\n        // spread key. To avoid false positive warnings, we never warn if\n        // there's a key.\n        !('key' in config)\n      ) {\n        didWarnAboutOldJSXRuntime = true;\n        console.warn(\n          'Your app (or one of its dependencies) is using an outdated JSX ' +\n            'transform. Update to the modern JSX transform for ' +\n            'faster performance: https://react.dev/link/new-jsx-transform',\n        );\n      }\n    }\n\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n      key = '' + config.key;\n    }\n\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (\n        hasOwnProperty.call(config, propName) &&\n        // Skip over reserved prop names\n        propName !== 'key' &&\n        // Even though we don't use these anymore in the runtime, we don't want\n        // them to appear as props, so in createElement we filter them out.\n        // We don't have to do this in the jsx() runtime because the jsx()\n        // transform never passed these as props; it used separate arguments.\n        propName !== '__self' &&\n        propName !== '__source'\n      ) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  const childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    if (__DEV__) {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n  if (__DEV__) {\n    if (key) {\n      const displayName =\n        typeof type === 'function'\n          ? type.displayName || type.name || 'Unknown'\n          : type;\n      defineKeyPropWarningGetter(props, displayName);\n    }\n  }\n\n  return ReactElement(\n    type,\n    key,\n    undefined,\n    undefined,\n    getOwner(),\n    props,\n    __DEV__ && enableOwnerStacks ? Error('react-stack-top-frame') : undefined,\n    __DEV__ && enableOwnerStacks ? createTask(getTaskName(type)) : undefined,\n  );\n}\n\nexport function cloneAndReplaceKey(oldElement, newKey) {\n  const clonedElement = ReactElement(\n    oldElement.type,\n    newKey,\n    undefined,\n    undefined,\n    !__DEV__ ? undefined : oldElement._owner,\n    oldElement.props,\n    __DEV__ && enableOwnerStacks ? oldElement._debugStack : undefined,\n    __DEV__ && enableOwnerStacks ? oldElement._debugTask : undefined,\n  );\n  if (__DEV__) {\n    // The cloned element should inherit the original element's key validation.\n    clonedElement._store.validated = oldElement._store.validated;\n  }\n  return clonedElement;\n}\n\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\nexport function cloneElement(element, config, children) {\n  if (element === null || element === undefined) {\n    throw new Error(\n      `The argument must be a React element, but you passed ${element}.`,\n    );\n  }\n\n  let propName;\n\n  // Original props are copied\n  const props = assign({}, element.props);\n\n  // Reserved names are extracted\n  let key = element.key;\n\n  // Owner will be preserved, unless ref is overridden\n  let owner = !__DEV__ ? undefined : element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      owner = __DEV__ ? getOwner() : undefined;\n    }\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n      key = '' + config.key;\n    }\n\n    // Remaining properties override existing props\n    let defaultProps;\n    if (\n      !disableDefaultPropsExceptForClasses &&\n      element.type &&\n      element.type.defaultProps\n    ) {\n      defaultProps = element.type.defaultProps;\n    }\n    for (propName in config) {\n      if (\n        hasOwnProperty.call(config, propName) &&\n        // Skip over reserved prop names\n        propName !== 'key' &&\n        // ...and maybe these, too, though we currently rely on them for\n        // warnings and debug information in dev. Need to decide if we're OK\n        // with dropping them. In the jsx() runtime it's not an issue because\n        // the data gets passed as separate arguments instead of props, but\n        // it would be nice to stop relying on them entirely so we can drop\n        // them from the internal Fiber field.\n        propName !== '__self' &&\n        propName !== '__source' &&\n        // Undefined `ref` is ignored by cloneElement. We treat it the same as\n        // if the property were missing. This is mostly for\n        // backwards compatibility.\n        !(propName === 'ref' && config.ref === undefined)\n      ) {\n        if (\n          !disableDefaultPropsExceptForClasses &&\n          config[propName] === undefined &&\n          defaultProps !== undefined\n        ) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  const childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  const clonedElement = ReactElement(\n    element.type,\n    key,\n    undefined,\n    undefined,\n    owner,\n    props,\n    __DEV__ && enableOwnerStacks ? element._debugStack : undefined,\n    __DEV__ && enableOwnerStacks ? element._debugTask : undefined,\n  );\n\n  for (let i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], clonedElement.type);\n  }\n\n  return clonedElement;\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (__DEV__) {\n    if (enableOwnerStacks) {\n      // When owner stacks is enabled no warnings happens. All we do is\n      // mark elements as being in a valid static child position so they\n      // don't need keys.\n      if (isValidElement(node)) {\n        if (node._store) {\n          node._store.validated = 1;\n        }\n      }\n      return;\n    }\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) {\n      // This is a reference to a client component so it's unknown.\n    } else if (isArray(node)) {\n      for (let i = 0; i < node.length; i++) {\n        const child = node[i];\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = 1;\n      }\n    } else {\n      const iteratorFn = getIteratorFn(node);\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          const iterator = iteratorFn.call(node);\n          if (iterator !== node) {\n            let step;\n            while (!(step = iterator.next()).done) {\n              if (isValidElement(step.value)) {\n                validateExplicitKey(step.value, parentType);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\nexport function isValidElement(object) {\n  return (\n    typeof object === 'object' &&\n    object !== null &&\n    object.$$typeof === REACT_ELEMENT_TYPE\n  );\n}\n\nconst ownerHasKeyUseWarning = {};\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (enableOwnerStacks) {\n    // Skip. Will verify in renderer instead.\n    return;\n  }\n  if (__DEV__) {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n    element._store.validated = 1;\n\n    const currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;\n\n    // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n    let childOwner = '';\n    if (element && element._owner != null && element._owner !== getOwner()) {\n      let ownerName = null;\n      if (typeof element._owner.tag === 'number') {\n        ownerName = getComponentNameFromType(element._owner.type);\n      } else if (typeof element._owner.name === 'string') {\n        ownerName = element._owner.name;\n      }\n      // Give the component that originally created this child.\n      childOwner = ` It was passed a child from ${ownerName}.`;\n    }\n\n    const prevGetCurrentStack = ReactSharedInternals.getCurrentStack;\n    ReactSharedInternals.getCurrentStack = function () {\n      const owner = element._owner;\n      // Add an extra top frame while an element is being validated\n      let stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        owner ? owner.type : null,\n      );\n      // Delegate to the injected renderer-specific implementation\n      if (prevGetCurrentStack) {\n        stack += prevGetCurrentStack() || '';\n      }\n      return stack;\n    };\n    console.error(\n      'Each child in a list should have a unique \"key\" prop.' +\n        '%s%s See https://react.dev/link/warning-keys for more information.',\n      currentComponentErrorInfo,\n      childOwner,\n    );\n    ReactSharedInternals.getCurrentStack = prevGetCurrentStack;\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  if (__DEV__) {\n    let info = '';\n    const owner = getOwner();\n    if (owner) {\n      const name = getComponentNameFromType(owner.type);\n      if (name) {\n        info = '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n    if (!info) {\n      const parentName = getComponentNameFromType(parentType);\n      if (parentName) {\n        info = `\\n\\nCheck the top-level render call using <${parentName}>.`;\n      }\n    }\n    return info;\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  ReactNodeList,\n  Thenable,\n  PendingThenable,\n  FulfilledThenable,\n  RejectedThenable,\n} from 'shared/ReactTypes';\n\nimport isArray from 'shared/isArray';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_PORTAL_TYPE,\n} from 'shared/ReactSymbols';\nimport {checkKeyStringCoercion} from 'shared/CheckStringCoercion';\n\nimport {isValidElement, cloneAndReplaceKey} from './jsx/ReactJSXElement';\n\nconst SEPARATOR = '.';\nconst SUBSEPARATOR = ':';\n\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\nfunction escape(key: string): string {\n  const escapeRegex = /[=:]/g;\n  const escaperLookup = {\n    '=': '=0',\n    ':': '=2',\n  };\n  const escapedString = key.replace(escapeRegex, function (match) {\n    // $FlowFixMe[invalid-computed-prop]\n    return escaperLookup[match];\n  });\n\n  return '$' + escapedString;\n}\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nlet didWarnAboutMaps = false;\n\nconst userProvidedKeyEscapeRegex = /\\/+/g;\nfunction escapeUserProvidedKey(text: string): string {\n  return text.replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\n/**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getElementKey(element: any, index: number): string {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof element === 'object' && element !== null && element.key != null) {\n    // Explicit key\n    if (__DEV__) {\n      checkKeyStringCoercion(element.key);\n    }\n    return escape('' + element.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\nfunction noop() {}\n\nfunction resolveThenable<T>(thenable: Thenable<T>): T {\n  switch (thenable.status) {\n    case 'fulfilled': {\n      const fulfilledValue: T = thenable.value;\n      return fulfilledValue;\n    }\n    case 'rejected': {\n      const rejectedError = thenable.reason;\n      throw rejectedError;\n    }\n    default: {\n      if (typeof thenable.status === 'string') {\n        // Only instrument the thenable if the status if not defined. If\n        // it's defined, but an unknown value, assume it's been instrumented by\n        // some custom userspace implementation. We treat it as \"pending\".\n        // Attach a dummy listener, to ensure that any lazy initialization can\n        // happen. Flight lazily parses JSON when the value is actually awaited.\n        thenable.then(noop, noop);\n      } else {\n        // This is an uncached thenable that we haven't seen before.\n\n        // TODO: Detect infinite ping loops caused by uncached promises.\n\n        const pendingThenable: PendingThenable<T> = (thenable: any);\n        pendingThenable.status = 'pending';\n        pendingThenable.then(\n          fulfilledValue => {\n            if (thenable.status === 'pending') {\n              const fulfilledThenable: FulfilledThenable<T> = (thenable: any);\n              fulfilledThenable.status = 'fulfilled';\n              fulfilledThenable.value = fulfilledValue;\n            }\n          },\n          (error: mixed) => {\n            if (thenable.status === 'pending') {\n              const rejectedThenable: RejectedThenable<T> = (thenable: any);\n              rejectedThenable.status = 'rejected';\n              rejectedThenable.reason = error;\n            }\n          },\n        );\n      }\n\n      // Check one more time in case the thenable resolved synchronously.\n      switch ((thenable: Thenable<T>).status) {\n        case 'fulfilled': {\n          const fulfilledThenable: FulfilledThenable<T> = (thenable: any);\n          return fulfilledThenable.value;\n        }\n        case 'rejected': {\n          const rejectedThenable: RejectedThenable<T> = (thenable: any);\n          const rejectedError = rejectedThenable.reason;\n          throw rejectedError;\n        }\n      }\n    }\n  }\n  throw thenable;\n}\n\nfunction mapIntoArray(\n  children: ?ReactNodeList,\n  array: Array<React$Node>,\n  escapedPrefix: string,\n  nameSoFar: string,\n  callback: (?React$Node) => ?ReactNodeList,\n): number {\n  const type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  let invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'bigint':\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n      case 'object':\n        switch ((children: any).$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n            break;\n          case REACT_LAZY_TYPE:\n            const payload = (children: any)._payload;\n            const init = (children: any)._init;\n            return mapIntoArray(\n              init(payload),\n              array,\n              escapedPrefix,\n              nameSoFar,\n              callback,\n            );\n        }\n    }\n  }\n\n  if (invokeCallback) {\n    const child = children;\n    let mappedChild = callback(child);\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows:\n    const childKey =\n      nameSoFar === '' ? SEPARATOR + getElementKey(child, 0) : nameSoFar;\n    if (isArray(mappedChild)) {\n      let escapedChildKey = '';\n      if (childKey != null) {\n        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n      }\n      mapIntoArray(mappedChild, array, escapedChildKey, '', c => c);\n    } else if (mappedChild != null) {\n      if (isValidElement(mappedChild)) {\n        if (__DEV__) {\n          // The `if` statement here prevents auto-disabling of the safe\n          // coercion ESLint rule, so we must manually disable it below.\n          // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n          if (mappedChild.key != null) {\n            if (!child || child.key !== mappedChild.key) {\n              checkKeyStringCoercion(mappedChild.key);\n            }\n          }\n        }\n        const newChild = cloneAndReplaceKey(\n          mappedChild,\n          // Keep both the (mapped) and old keys if they differ, just as\n          // traverseAllChildren used to do for objects as children\n          escapedPrefix +\n            // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n            (mappedChild.key != null &&\n            (!child || child.key !== mappedChild.key)\n              ? escapeUserProvidedKey(\n                  // $FlowFixMe[unsafe-addition]\n                  '' + mappedChild.key, // eslint-disable-line react-internal/safe-string-coercion\n                ) + '/'\n              : '') +\n            childKey,\n        );\n        if (__DEV__) {\n          // If `child` was an element without a `key`, we need to validate if\n          // it should have had a `key`, before assigning one to `mappedChild`.\n          // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n          if (\n            nameSoFar !== '' &&\n            child != null &&\n            isValidElement(child) &&\n            child.key == null\n          ) {\n            // We check truthiness of `child._store.validated` instead of being\n            // inequal to `1` to provide a bit of backward compatibility for any\n            // libraries (like `fbt`) which may be hacking this property.\n            if (child._store && !child._store.validated) {\n              // Mark this child as having failed validation, but let the actual\n              // renderer print the warning later.\n              newChild._store.validated = 2;\n            }\n          }\n        }\n        mappedChild = newChild;\n      }\n      array.push(mappedChild);\n    }\n    return 1;\n  }\n\n  let child;\n  let nextName;\n  let subtreeCount = 0; // Count of children found in the current subtree.\n  const nextNamePrefix =\n    nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getElementKey(child, i);\n      subtreeCount += mapIntoArray(\n        child,\n        array,\n        escapedPrefix,\n        nextName,\n        callback,\n      );\n    }\n  } else {\n    const iteratorFn = getIteratorFn(children);\n    if (typeof iteratorFn === 'function') {\n      const iterableChildren: Iterable<React$Node> & {\n        entries: any,\n      } = (children: any);\n\n      if (__DEV__) {\n        // Warn about using Maps as children\n        if (iteratorFn === iterableChildren.entries) {\n          if (!didWarnAboutMaps) {\n            console.warn(\n              'Using Maps as children is not supported. ' +\n                'Use an array of keyed ReactElements instead.',\n            );\n          }\n          didWarnAboutMaps = true;\n        }\n      }\n\n      const iterator = iteratorFn.call(iterableChildren);\n      let step;\n      let ii = 0;\n      // $FlowFixMe[incompatible-use] `iteratorFn` might return null according to typing.\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getElementKey(child, ii++);\n        subtreeCount += mapIntoArray(\n          child,\n          array,\n          escapedPrefix,\n          nextName,\n          callback,\n        );\n      }\n    } else if (type === 'object') {\n      if (typeof (children: any).then === 'function') {\n        return mapIntoArray(\n          resolveThenable((children: any)),\n          array,\n          escapedPrefix,\n          nameSoFar,\n          callback,\n        );\n      }\n\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      const childrenString = String((children: any));\n\n      throw new Error(\n        `Objects are not valid as a React child (found: ${\n          childrenString === '[object Object]'\n            ? 'object with keys {' +\n              Object.keys((children: any)).join(', ') +\n              '}'\n            : childrenString\n        }). ` +\n          'If you meant to render a collection of children, use an array ' +\n          'instead.',\n      );\n    }\n  }\n\n  return subtreeCount;\n}\n\ntype MapFunc = (child: ?React$Node, index: number) => ?ReactNodeList;\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(\n  children: ?ReactNodeList,\n  func: MapFunc,\n  context: mixed,\n): ?Array<React$Node> {\n  if (children == null) {\n    // $FlowFixMe limitation refining abstract types in Flow\n    return children;\n  }\n  const result: Array<React$Node> = [];\n  let count = 0;\n  mapIntoArray(children, result, '', '', function (child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children: ?ReactNodeList): number {\n  let n = 0;\n  mapChildren(children, () => {\n    n++;\n    // Don't return anything\n  });\n  return n;\n}\n\ntype ForEachFunc = (child: ?React$Node) => void;\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(\n  children: ?ReactNodeList,\n  forEachFunc: ForEachFunc,\n  forEachContext: mixed,\n): void {\n  mapChildren(\n    children,\n    // $FlowFixMe[missing-this-annot]\n    function () {\n      forEachFunc.apply(this, arguments);\n      // Don't return anything.\n    },\n    forEachContext,\n  );\n}\n\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\nfunction toArray(children: ?ReactNodeList): Array<React$Node> {\n  return mapChildren(children, child => child) || [];\n}\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\nfunction onlyChild<T>(children: T): T {\n  if (!isValidElement(children)) {\n    throw new Error(\n      'React.Children.only expected to receive a single React element child.',\n    );\n  }\n\n  return children;\n}\n\nexport {\n  forEachChildren as forEach,\n  mapChildren as map,\n  countChildren as count,\n  onlyChild as only,\n  toArray,\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {\n  REACT_PROVIDER_TYPE,\n  REACT_CONSUMER_TYPE,\n  REACT_CONTEXT_TYPE,\n} from 'shared/ReactSymbols';\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport {enableRenderableContext} from 'shared/ReactFeatureFlags';\n\nexport function createContext<T>(defaultValue: T): ReactContext<T> {\n  // TODO: Second argument used to be an optional `calculateChangedBits`\n  // function. Warn to reserve for future use?\n\n  const context: ReactContext<T> = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: (null: any),\n    Consumer: (null: any),\n  };\n\n  if (enableRenderableContext) {\n    context.Provider = context;\n    context.Consumer = {\n      $$typeof: REACT_CONSUMER_TYPE,\n      _context: context,\n    };\n  } else {\n    (context: any).Provider = {\n      $$typeof: REACT_PROVIDER_TYPE,\n      _context: context,\n    };\n    if (__DEV__) {\n      const Consumer: any = {\n        $$typeof: REACT_CONTEXT_TYPE,\n        _context: context,\n      };\n      Object.defineProperties(Consumer, {\n        Provider: {\n          get() {\n            return context.Provider;\n          },\n          set(_Provider: any) {\n            context.Provider = _Provider;\n          },\n        },\n        _currentValue: {\n          get() {\n            return context._currentValue;\n          },\n          set(_currentValue: T) {\n            context._currentValue = _currentValue;\n          },\n        },\n        _currentValue2: {\n          get() {\n            return context._currentValue2;\n          },\n          set(_currentValue2: T) {\n            context._currentValue2 = _currentValue2;\n          },\n        },\n        _threadCount: {\n          get() {\n            return context._threadCount;\n          },\n          set(_threadCount: number) {\n            context._threadCount = _threadCount;\n          },\n        },\n        Consumer: {\n          get() {\n            return context.Consumer;\n          },\n        },\n        displayName: {\n          get() {\n            return context.displayName;\n          },\n          set(displayName: void | string) {},\n        },\n      });\n      (context: any).Consumer = Consumer;\n    } else {\n      (context: any).Consumer = context;\n    }\n  }\n\n  if (__DEV__) {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Wakeable, Thenable, ReactDebugInfo} from 'shared/ReactTypes';\n\nimport {REACT_LAZY_TYPE} from 'shared/ReactSymbols';\nimport {disableDefaultPropsExceptForClasses} from 'shared/ReactFeatureFlags';\n\nconst Uninitialized = -1;\nconst Pending = 0;\nconst Resolved = 1;\nconst Rejected = 2;\n\ntype UninitializedPayload<T> = {\n  _status: -1,\n  _result: () => Thenable<{default: T, ...}>,\n};\n\ntype PendingPayload = {\n  _status: 0,\n  _result: Wakeable,\n};\n\ntype ResolvedPayload<T> = {\n  _status: 1,\n  _result: {default: T, ...},\n};\n\ntype RejectedPayload = {\n  _status: 2,\n  _result: mixed,\n};\n\ntype Payload<T> =\n  | UninitializedPayload<T>\n  | PendingPayload\n  | ResolvedPayload<T>\n  | RejectedPayload;\n\nexport type LazyComponent<T, P> = {\n  $$typeof: symbol | number,\n  _payload: P,\n  _init: (payload: P) => T,\n  _debugInfo?: null | ReactDebugInfo,\n};\n\nfunction lazyInitializer<T>(payload: Payload<T>): T {\n  if (payload._status === Uninitialized) {\n    const ctor = payload._result;\n    const thenable = ctor();\n    // Transition to the next state.\n    // This might throw either because it's missing or throws. If so, we treat it\n    // as still uninitialized and try again next time. Which is the same as what\n    // happens if the ctor or any wrappers processing the ctor throws. This might\n    // end up fixing it if the resolution was a concurrency bug.\n    thenable.then(\n      moduleObject => {\n        if (\n          (payload: Payload<T>)._status === Pending ||\n          payload._status === Uninitialized\n        ) {\n          // Transition to the next state.\n          const resolved: ResolvedPayload<T> = (payload: any);\n          resolved._status = Resolved;\n          resolved._result = moduleObject;\n        }\n      },\n      error => {\n        if (\n          (payload: Payload<T>)._status === Pending ||\n          payload._status === Uninitialized\n        ) {\n          // Transition to the next state.\n          const rejected: RejectedPayload = (payload: any);\n          rejected._status = Rejected;\n          rejected._result = error;\n        }\n      },\n    );\n    if (payload._status === Uninitialized) {\n      // In case, we're still uninitialized, then we're waiting for the thenable\n      // to resolve. Set it as pending in the meantime.\n      const pending: PendingPayload = (payload: any);\n      pending._status = Pending;\n      pending._result = thenable;\n    }\n  }\n  if (payload._status === Resolved) {\n    const moduleObject = payload._result;\n    if (__DEV__) {\n      if (moduleObject === undefined) {\n        console.error(\n          'lazy: Expected the result of a dynamic imp' +\n            'ort() call. ' +\n            'Instead received: %s\\n\\nYour code should look like: \\n  ' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' +\n            \"ort('./MyComponent'))\\n\\n\" +\n            'Did you accidentally put curly braces around the import?',\n          moduleObject,\n        );\n      }\n    }\n    if (__DEV__) {\n      if (!('default' in moduleObject)) {\n        console.error(\n          'lazy: Expected the result of a dynamic imp' +\n            'ort() call. ' +\n            'Instead received: %s\\n\\nYour code should look like: \\n  ' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' +\n            \"ort('./MyComponent'))\",\n          moduleObject,\n        );\n      }\n    }\n    return moduleObject.default;\n  } else {\n    throw payload._result;\n  }\n}\n\nexport function lazy<T>(\n  ctor: () => Thenable<{default: T, ...}>,\n): LazyComponent<T, Payload<T>> {\n  const payload: Payload<T> = {\n    // We use these fields to store the result.\n    _status: Uninitialized,\n    _result: ctor,\n  };\n\n  const lazyType: LazyComponent<T, Payload<T>> = {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: payload,\n    _init: lazyInitializer,\n  };\n\n  if (!disableDefaultPropsExceptForClasses) {\n    if (__DEV__) {\n      // In production, this would just set it on the object.\n      let defaultProps;\n      // $FlowFixMe[prop-missing]\n      Object.defineProperties(lazyType, {\n        defaultProps: {\n          configurable: true,\n          get() {\n            return defaultProps;\n          },\n          // $FlowFixMe[missing-local-annot]\n          set(newDefaultProps) {\n            console.error(\n              'It is not supported to assign `defaultProps` to ' +\n                'a lazy component import. Either specify them where the component ' +\n                'is defined, or create a wrapping component around it.',\n            );\n            defaultProps = newDefaultProps;\n            // Match production behavior more closely:\n            // $FlowFixMe[prop-missing]\n            Object.defineProperty(lazyType, 'defaultProps', {\n              enumerable: true,\n            });\n          },\n        },\n      });\n    }\n  }\n\n  return lazyType;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nimport {REACT_FORWARD_REF_TYPE, REACT_MEMO_TYPE} from 'shared/ReactSymbols';\n\nexport function forwardRef<Props, ElementType: React$ElementType>(\n  render: (\n    props: Props,\n    ref: React$RefSetter<React$ElementRef<ElementType>>,\n  ) => React$Node,\n) {\n  if (__DEV__) {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      console.error(\n        'forwardRef requires a render function but received a `memo` ' +\n          'component. Instead of forwardRef(memo(...)), use ' +\n          'memo(forwardRef(...)).',\n      );\n    } else if (typeof render !== 'function') {\n      console.error(\n        'forwardRef requires a render function but was given %s.',\n        render === null ? 'null' : typeof render,\n      );\n    } else {\n      if (render.length !== 0 && render.length !== 2) {\n        console.error(\n          'forwardRef render functions accept exactly two parameters: props and ref. %s',\n          render.length === 1\n            ? 'Did you forget to use the ref parameter?'\n            : 'Any additional parameter will be undefined.',\n        );\n      }\n    }\n\n    if (render != null) {\n      if (render.defaultProps != null) {\n        console.error(\n          'forwardRef render functions do not support defaultProps. ' +\n            'Did you accidentally pass a React component?',\n        );\n      }\n    }\n  }\n\n  const elementType = {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render,\n  };\n  if (__DEV__) {\n    let ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name;\n\n        // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.forwardRef((props, ref) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n        if (!render.name && !render.displayName) {\n          Object.defineProperty(render, 'name', {\n            value: name,\n          });\n          render.displayName = name;\n        }\n      },\n    });\n  }\n  return elementType;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nimport {REACT_MEMO_TYPE} from 'shared/ReactSymbols';\n\nimport isValidElementType from 'shared/isValidElementType';\n\nexport function memo<Props>(\n  type: React$ElementType,\n  compare?: (oldProps: Props, newProps: Props) => boolean,\n) {\n  if (__DEV__) {\n    if (!isValidElementType(type)) {\n      console.error(\n        'memo: The first argument must be a component. Instead ' +\n          'received: %s',\n        type === null ? 'null' : typeof type,\n      );\n    }\n  }\n  const elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type,\n    compare: compare === undefined ? null : compare,\n  };\n  if (__DEV__) {\n    let ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name;\n\n        // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.memo((props) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n        if (!type.name && !type.displayName) {\n          Object.defineProperty(type, 'name', {\n            value: name,\n          });\n          type.displayName = name;\n        }\n      },\n    });\n  }\n  return elementType;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {disableClientCache} from 'shared/ReactFeatureFlags';\nimport {cache as cacheImpl} from './ReactCacheImpl';\n\nexport function noopCache<A: Iterable<mixed>, T>(fn: (...A) => T): (...A) => T {\n  // On the client (i.e. not a Server Components environment) `cache` has\n  // no caching behavior. We just return the function as-is.\n  //\n  // We intend to implement client caching in a future major release. In the\n  // meantime, it's only exposed as an API so that Shared Components can use\n  // per-request caching on the server without breaking on the client. But it\n  // does mean they need to be aware of the behavioral difference.\n  //\n  // The rest of the behavior is the same as the server implementation — it\n  // returns a new reference, extra properties like `displayName` are not\n  // preserved, the length of the new function is 0, etc. That way apps can't\n  // accidentally depend on those details.\n  return function () {\n    // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n    return fn.apply(null, arguments);\n  };\n}\n\nexport const cache: typeof noopCache = disableClientCache\n  ? noopCache\n  : cacheImpl;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Dispatcher} from 'react-reconciler/src/ReactInternalTypes';\nimport type {\n  ReactContext,\n  StartTransitionOptions,\n  Usable,\n  Awaited,\n} from 'shared/ReactTypes';\nimport {REACT_CONSUMER_TYPE} from 'shared/ReactSymbols';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nimport {\n  enableAsyncActions,\n  enableUseResourceEffectHook,\n} from 'shared/ReactFeatureFlags';\nimport {\n  enableContextProfiling,\n  enableLazyContextPropagation,\n} from '../../shared/ReactFeatureFlags';\n\ntype BasicStateAction<S> = (S => S) | S;\ntype Dispatch<A> = A => void;\n\nfunction resolveDispatcher() {\n  const dispatcher = ReactSharedInternals.H;\n  if (__DEV__) {\n    if (dispatcher === null) {\n      console.error(\n        'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n          ' one of the following reasons:\\n' +\n          '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n          '2. You might be breaking the Rules of Hooks\\n' +\n          '3. You might have more than one copy of React in the same app\\n' +\n          'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.',\n      );\n    }\n  }\n  // Will result in a null access error if accessed outside render phase. We\n  // intentionally don't throw our own error because this is in a hot path.\n  // Also helps ensure this is inlined.\n  return ((dispatcher: any): Dispatcher);\n}\n\nexport function getCacheForType<T>(resourceType: () => T): T {\n  const dispatcher = ReactSharedInternals.A;\n  if (!dispatcher) {\n    // If there is no dispatcher, then we treat this as not being cached.\n    return resourceType();\n  }\n  return dispatcher.getCacheForType(resourceType);\n}\n\nexport function useContext<T>(Context: ReactContext<T>): T {\n  const dispatcher = resolveDispatcher();\n  if (__DEV__) {\n    if (Context.$$typeof === REACT_CONSUMER_TYPE) {\n      console.error(\n        'Calling useContext(Context.Consumer) is not supported and will cause bugs. ' +\n          'Did you mean to call useContext(Context) instead?',\n      );\n    }\n  }\n  return dispatcher.useContext(Context);\n}\n\nexport function unstable_useContextWithBailout<T>(\n  context: ReactContext<T>,\n  select: (T => Array<mixed>) | null,\n): T {\n  if (!(enableLazyContextPropagation && enableContextProfiling)) {\n    throw new Error('Not implemented.');\n  }\n\n  const dispatcher = resolveDispatcher();\n  if (__DEV__) {\n    if (context.$$typeof === REACT_CONSUMER_TYPE) {\n      console.error(\n        'Calling useContext(Context.Consumer) is not supported and will cause bugs. ' +\n          'Did you mean to call useContext(Context) instead?',\n      );\n    }\n  }\n  // $FlowFixMe[not-a-function] This is unstable, thus optional\n  return dispatcher.unstable_useContextWithBailout(context, select);\n}\n\nexport function useState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\n\nexport function useReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\n\nexport function useRef<T>(initialValue: T): {current: T} {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\n\nexport function useEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\n\nexport function useInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useInsertionEffect(create, deps);\n}\n\nexport function useLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\n\nexport function useCallback<T>(\n  callback: T,\n  deps: Array<mixed> | void | null,\n): T {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\n\nexport function useMemo<T>(\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\n\nexport function useImperativeHandle<T>(\n  ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\n\nexport function useDebugValue<T>(\n  value: T,\n  formatterFn: ?(value: T) => mixed,\n): void {\n  if (__DEV__) {\n    const dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\n\nexport function useTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useTransition();\n}\n\nexport function useDeferredValue<T>(value: T, initialValue?: T): T {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useDeferredValue(value, initialValue);\n}\n\nexport function useId(): string {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useId();\n}\n\nexport function useSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useSyncExternalStore(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n  );\n}\n\nexport function useCacheRefresh(): <T>(?() => T, ?T) => void {\n  const dispatcher = resolveDispatcher();\n  // $FlowFixMe[not-a-function] This is unstable, thus optional\n  return dispatcher.useCacheRefresh();\n}\n\nexport function use<T>(usable: Usable<T>): T {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.use(usable);\n}\n\nexport function useMemoCache(size: number): Array<mixed> {\n  const dispatcher = resolveDispatcher();\n  // $FlowFixMe[not-a-function] This is unstable, thus optional\n  return dispatcher.useMemoCache(size);\n}\n\nexport function useEffectEvent<Args, F: (...Array<Args>) => mixed>(\n  callback: F,\n): F {\n  const dispatcher = resolveDispatcher();\n  // $FlowFixMe[not-a-function] This is unstable, thus optional\n  return dispatcher.useEffectEvent(callback);\n}\n\nexport function useResourceEffect(\n  create: () => mixed,\n  createDeps: Array<mixed> | void | null,\n  update: ((resource: mixed) => void) | void,\n  updateDeps: Array<mixed> | void | null,\n  destroy: ((resource: mixed) => void) | void,\n): void {\n  if (!enableUseResourceEffectHook) {\n    throw new Error('Not implemented.');\n  }\n  const dispatcher = resolveDispatcher();\n  // $FlowFixMe[not-a-function] This is unstable, thus optional\n  return dispatcher.useResourceEffect(\n    create,\n    createDeps,\n    update,\n    updateDeps,\n    destroy,\n  );\n}\n\nexport function useOptimistic<S, A>(\n  passthrough: S,\n  reducer: ?(S, A) => S,\n): [S, (A) => void] {\n  const dispatcher = resolveDispatcher();\n  // $FlowFixMe[not-a-function] This is unstable, thus optional\n  return dispatcher.useOptimistic(passthrough, reducer);\n}\n\nexport function useActionState<S, P>(\n  action: (Awaited<S>, P) => S,\n  initialState: Awaited<S>,\n  permalink?: string,\n): [Awaited<S>, (P) => void, boolean] {\n  if (!enableAsyncActions) {\n    throw new Error('Not implemented.');\n  } else {\n    const dispatcher = resolveDispatcher();\n    // $FlowFixMe[not-a-function] This is unstable, thus optional\n    return dispatcher.useActionState(action, initialState, permalink);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst reportGlobalError: (error: mixed) => void =\n  typeof reportError === 'function'\n    ? // In modern browsers, reportError will dispatch an error event,\n      // emulating an uncaught JavaScript error.\n      reportError\n    : error => {\n        if (\n          typeof window === 'object' &&\n          typeof window.ErrorEvent === 'function'\n        ) {\n          // Browser Polyfill\n          const message =\n            typeof error === 'object' &&\n            error !== null &&\n            typeof error.message === 'string'\n              ? // eslint-disable-next-line react-internal/safe-string-coercion\n                String(error.message)\n              : // eslint-disable-next-line react-internal/safe-string-coercion\n                String(error);\n          const event = new window.ErrorEvent('error', {\n            bubbles: true,\n            cancelable: true,\n            message: message,\n            error: error,\n          });\n          const shouldLog = window.dispatchEvent(event);\n          if (!shouldLog) {\n            return;\n          }\n        } else if (\n          typeof process === 'object' &&\n          // $FlowFixMe[method-unbinding]\n          typeof process.emit === 'function'\n        ) {\n          // Node Polyfill\n          process.emit('uncaughtException', error);\n          return;\n        }\n        console['error'](error);\n      };\n\nexport default reportGlobalError;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport type {BatchConfigTransition} from 'react-reconciler/src/ReactFiberTracingMarkerComponent';\nimport type {StartTransitionOptions} from 'shared/ReactTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nimport {\n  enableAsyncActions,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\n\nimport reportGlobalError from 'shared/reportGlobalError';\n\nexport function startTransition(\n  scope: () => void,\n  options?: StartTransitionOptions,\n) {\n  const prevTransition = ReactSharedInternals.T;\n  const currentTransition: BatchConfigTransition = {};\n  ReactSharedInternals.T = currentTransition;\n\n  if (__DEV__) {\n    currentTransition._updatedFibers = new Set();\n  }\n\n  if (enableTransitionTracing) {\n    if (options !== undefined && options.name !== undefined) {\n      currentTransition.name = options.name;\n      currentTransition.startTime = -1;\n    }\n  }\n\n  if (enableAsyncActions) {\n    try {\n      const returnValue = scope();\n      const onStartTransitionFinish = ReactSharedInternals.S;\n      if (onStartTransitionFinish !== null) {\n        onStartTransitionFinish(currentTransition, returnValue);\n      }\n      if (\n        typeof returnValue === 'object' &&\n        returnValue !== null &&\n        typeof returnValue.then === 'function'\n      ) {\n        returnValue.then(noop, reportGlobalError);\n      }\n    } catch (error) {\n      reportGlobalError(error);\n    } finally {\n      warnAboutTransitionSubscriptions(prevTransition, currentTransition);\n      ReactSharedInternals.T = prevTransition;\n    }\n  } else {\n    // When async actions are not enabled, startTransition does not\n    // capture errors.\n    try {\n      scope();\n    } finally {\n      warnAboutTransitionSubscriptions(prevTransition, currentTransition);\n      ReactSharedInternals.T = prevTransition;\n    }\n  }\n}\n\nfunction warnAboutTransitionSubscriptions(\n  prevTransition: BatchConfigTransition | null,\n  currentTransition: BatchConfigTransition,\n) {\n  if (__DEV__) {\n    if (prevTransition === null && currentTransition._updatedFibers) {\n      const updatedFibersCount = currentTransition._updatedFibers.size;\n      currentTransition._updatedFibers.clear();\n      if (updatedFibersCount > 10) {\n        console.warn(\n          'Detected a large number of updates inside startTransition. ' +\n            'If this is due to a subscription please re-write it to use React provided hooks. ' +\n            'Otherwise concurrent mode guarantees are off the table.',\n        );\n      }\n    }\n  }\n}\n\nfunction noop() {}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Thenable} from 'shared/ReactTypes';\nimport type {RendererTask} from './ReactSharedInternalsClient';\nimport ReactSharedInternals from './ReactSharedInternalsClient';\nimport queueMacrotask from 'shared/enqueueTask';\n\nimport {disableLegacyMode} from 'shared/ReactFeatureFlags';\n\n// `act` calls can be nested, so we track the depth. This represents the\n// number of `act` scopes on the stack.\nlet actScopeDepth = 0;\n\n// We only warn the first time you neglect to await an async `act` scope.\nlet didWarnNoAwaitAct = false;\n\nfunction aggregateErrors(errors: Array<mixed>): mixed {\n  if (errors.length > 1 && typeof AggregateError === 'function') {\n    // eslint-disable-next-line no-undef\n    return new AggregateError(errors);\n  }\n  return errors[0];\n}\n\nexport function act<T>(callback: () => T | Thenable<T>): Thenable<T> {\n  if (__DEV__) {\n    // When ReactSharedInternals.actQueue is not null, it signals to React that\n    // we're currently inside an `act` scope. React will push all its tasks to\n    // this queue instead of scheduling them with platform APIs.\n    //\n    // We set this to an empty array when we first enter an `act` scope, and\n    // only unset it once we've left the outermost `act` scope — remember that\n    // `act` calls can be nested.\n    //\n    // If we're already inside an `act` scope, reuse the existing queue.\n    const prevIsBatchingLegacy = !disableLegacyMode\n      ? ReactSharedInternals.isBatchingLegacy\n      : false;\n    const prevActQueue = ReactSharedInternals.actQueue;\n    const prevActScopeDepth = actScopeDepth;\n    actScopeDepth++;\n    const queue = (ReactSharedInternals.actQueue =\n      prevActQueue !== null ? prevActQueue : []);\n    // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only\n    // set to `true` while the given callback is executed, not for updates\n    // triggered during an async event, because this is how the legacy\n    // implementation of `act` behaved.\n    if (!disableLegacyMode) {\n      ReactSharedInternals.isBatchingLegacy = true;\n    }\n\n    let result;\n    // This tracks whether the `act` call is awaited. In certain cases, not\n    // awaiting it is a mistake, so we will detect that and warn.\n    let didAwaitActCall = false;\n    try {\n      // Reset this to `false` right before entering the React work loop. The\n      // only place we ever read this fields is just below, right after running\n      // the callback. So we don't need to reset after the callback runs.\n      if (!disableLegacyMode) {\n        ReactSharedInternals.didScheduleLegacyUpdate = false;\n      }\n      result = callback();\n      const didScheduleLegacyUpdate = !disableLegacyMode\n        ? ReactSharedInternals.didScheduleLegacyUpdate\n        : false;\n\n      // Replicate behavior of original `act` implementation in legacy mode,\n      // which flushed updates immediately after the scope function exits, even\n      // if it's an async function.\n      if (!prevIsBatchingLegacy && didScheduleLegacyUpdate) {\n        flushActQueue(queue);\n      }\n      // `isBatchingLegacy` gets reset using the regular stack, not the async\n      // one used to track `act` scopes. Why, you may be wondering? Because\n      // that's how it worked before version 18. Yes, it's confusing! We should\n      // delete legacy mode!!\n      if (!disableLegacyMode) {\n        ReactSharedInternals.isBatchingLegacy = prevIsBatchingLegacy;\n      }\n    } catch (error) {\n      // `isBatchingLegacy` gets reset using the regular stack, not the async\n      // one used to track `act` scopes. Why, you may be wondering? Because\n      // that's how it worked before version 18. Yes, it's confusing! We should\n      // delete legacy mode!!\n      ReactSharedInternals.thrownErrors.push(error);\n    }\n    if (ReactSharedInternals.thrownErrors.length > 0) {\n      if (!disableLegacyMode) {\n        ReactSharedInternals.isBatchingLegacy = prevIsBatchingLegacy;\n      }\n      popActScope(prevActQueue, prevActScopeDepth);\n      const thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);\n      ReactSharedInternals.thrownErrors.length = 0;\n      throw thrownError;\n    }\n\n    if (\n      result !== null &&\n      typeof result === 'object' &&\n      // $FlowFixMe[method-unbinding]\n      typeof result.then === 'function'\n    ) {\n      // A promise/thenable was returned from the callback. Wait for it to\n      // resolve before flushing the queue.\n      //\n      // If `act` were implemented as an async function, this whole block could\n      // be a single `await` call. That's really the only difference between\n      // this branch and the next one.\n      const thenable = ((result: any): Thenable<T>);\n\n      // Warn if the an `act` call with an async scope is not awaited. In a\n      // future release, consider making this an error.\n      queueSeveralMicrotasks(() => {\n        if (!didAwaitActCall && !didWarnNoAwaitAct) {\n          didWarnNoAwaitAct = true;\n          console.error(\n            'You called act(async () => ...) without await. ' +\n              'This could lead to unexpected testing behaviour, ' +\n              'interleaving multiple act calls and mixing their ' +\n              'scopes. ' +\n              'You should - await act(async () => ...);',\n          );\n        }\n      });\n\n      return {\n        then(resolve: T => mixed, reject: mixed => mixed) {\n          didAwaitActCall = true;\n          thenable.then(\n            returnValue => {\n              popActScope(prevActQueue, prevActScopeDepth);\n              if (prevActScopeDepth === 0) {\n                // We're exiting the outermost `act` scope. Flush the queue.\n                try {\n                  flushActQueue(queue);\n                  queueMacrotask(() =>\n                    // Recursively flush tasks scheduled by a microtask.\n                    recursivelyFlushAsyncActWork(returnValue, resolve, reject),\n                  );\n                } catch (error) {\n                  // `thenable` might not be a real promise, and `flushActQueue`\n                  // might throw, so we need to wrap `flushActQueue` in a\n                  // try/catch.\n                  ReactSharedInternals.thrownErrors.push(error);\n                }\n                if (ReactSharedInternals.thrownErrors.length > 0) {\n                  const thrownError = aggregateErrors(\n                    ReactSharedInternals.thrownErrors,\n                  );\n                  ReactSharedInternals.thrownErrors.length = 0;\n                  reject(thrownError);\n                }\n              } else {\n                resolve(returnValue);\n              }\n            },\n            error => {\n              popActScope(prevActQueue, prevActScopeDepth);\n              if (ReactSharedInternals.thrownErrors.length > 0) {\n                const thrownError = aggregateErrors(\n                  ReactSharedInternals.thrownErrors,\n                );\n                ReactSharedInternals.thrownErrors.length = 0;\n                reject(thrownError);\n              } else {\n                reject(error);\n              }\n            },\n          );\n        },\n      };\n    } else {\n      const returnValue: T = (result: any);\n      // The callback is not an async function. Exit the current\n      // scope immediately.\n      popActScope(prevActQueue, prevActScopeDepth);\n      if (prevActScopeDepth === 0) {\n        // We're exiting the outermost `act` scope. Flush the queue.\n        flushActQueue(queue);\n\n        // If the queue is not empty, it implies that we intentionally yielded\n        // to the main thread, because something suspended. We will continue\n        // in an asynchronous task.\n        //\n        // Warn if something suspends but the `act` call is not awaited.\n        // In a future release, consider making this an error.\n        if (queue.length !== 0) {\n          queueSeveralMicrotasks(() => {\n            if (!didAwaitActCall && !didWarnNoAwaitAct) {\n              didWarnNoAwaitAct = true;\n              console.error(\n                'A component suspended inside an `act` scope, but the ' +\n                  '`act` call was not awaited. When testing React ' +\n                  'components that depend on asynchronous data, you must ' +\n                  'await the result:\\n\\n' +\n                  'await act(() => ...)',\n              );\n            }\n          });\n        }\n\n        // Like many things in this module, this is next part is confusing.\n        //\n        // We do not currently require every `act` call that is passed a\n        // callback to be awaited, through arguably we should. Since this\n        // callback was synchronous, we need to exit the current scope before\n        // returning.\n        //\n        // However, if thenable we're about to return *is* awaited, we'll\n        // immediately restore the current scope. So it shouldn't observable.\n        //\n        // This doesn't affect the case where the scope callback is async,\n        // because we always require those calls to be awaited.\n        //\n        // TODO: In a future version, consider always requiring all `act` calls\n        // to be awaited, regardless of whether the callback is sync or async.\n        ReactSharedInternals.actQueue = null;\n      }\n\n      if (ReactSharedInternals.thrownErrors.length > 0) {\n        const thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);\n        ReactSharedInternals.thrownErrors.length = 0;\n        throw thrownError;\n      }\n\n      return {\n        then(resolve: T => mixed, reject: mixed => mixed) {\n          didAwaitActCall = true;\n          if (prevActScopeDepth === 0) {\n            // If the `act` call is awaited, restore the queue we were\n            // using before (see long comment above) so we can flush it.\n            ReactSharedInternals.actQueue = queue;\n            queueMacrotask(() =>\n              // Recursively flush tasks scheduled by a microtask.\n              recursivelyFlushAsyncActWork(returnValue, resolve, reject),\n            );\n          } else {\n            resolve(returnValue);\n          }\n        },\n      };\n    }\n  } else {\n    throw new Error('act(...) is not supported in production builds of React.');\n  }\n}\n\nfunction popActScope(\n  prevActQueue: null | Array<RendererTask>,\n  prevActScopeDepth: number,\n) {\n  if (__DEV__) {\n    if (prevActScopeDepth !== actScopeDepth - 1) {\n      console.error(\n        'You seem to have overlapping act() calls, this is not supported. ' +\n          'Be sure to await previous act() calls before making a new one. ',\n      );\n    }\n    actScopeDepth = prevActScopeDepth;\n  }\n}\n\nfunction recursivelyFlushAsyncActWork<T>(\n  returnValue: T,\n  resolve: T => mixed,\n  reject: mixed => mixed,\n) {\n  if (__DEV__) {\n    // Check if any tasks were scheduled asynchronously.\n    const queue = ReactSharedInternals.actQueue;\n    if (queue !== null) {\n      if (queue.length !== 0) {\n        // Async tasks were scheduled, mostly likely in a microtask.\n        // Keep flushing until there are no more.\n        try {\n          flushActQueue(queue);\n          // The work we just performed may have schedule additional async\n          // tasks. Wait a macrotask and check again.\n          queueMacrotask(() =>\n            recursivelyFlushAsyncActWork(returnValue, resolve, reject),\n          );\n          return;\n        } catch (error) {\n          // Leave remaining tasks on the queue if something throws.\n          ReactSharedInternals.thrownErrors.push(error);\n        }\n      } else {\n        // The queue is empty. We can finish.\n        ReactSharedInternals.actQueue = null;\n      }\n    }\n    if (ReactSharedInternals.thrownErrors.length > 0) {\n      const thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);\n      ReactSharedInternals.thrownErrors.length = 0;\n      reject(thrownError);\n    } else {\n      resolve(returnValue);\n    }\n  }\n}\n\nlet isFlushing = false;\nfunction flushActQueue(queue: Array<RendererTask>) {\n  if (__DEV__) {\n    if (!isFlushing) {\n      // Prevent re-entrance.\n      isFlushing = true;\n      let i = 0;\n      try {\n        for (; i < queue.length; i++) {\n          let callback: RendererTask = queue[i];\n          do {\n            ReactSharedInternals.didUsePromise = false;\n            const continuation = callback(false);\n            if (continuation !== null) {\n              if (ReactSharedInternals.didUsePromise) {\n                // The component just suspended. Yield to the main thread in\n                // case the promise is already resolved. If so, it will ping in\n                // a microtask and we can resume without unwinding the stack.\n                queue[i] = callback;\n                queue.splice(0, i);\n                return;\n              }\n              callback = continuation;\n            } else {\n              break;\n            }\n          } while (true);\n        }\n        // We flushed the entire queue.\n        queue.length = 0;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        queue.splice(0, i + 1);\n        ReactSharedInternals.thrownErrors.push(error);\n      } finally {\n        isFlushing = false;\n      }\n    }\n  }\n}\n\n// Some of our warnings attempt to detect if the `act` call is awaited by\n// checking in an asynchronous task. Wait a few microtasks before checking. The\n// only reason one isn't sufficient is we want to accommodate the case where an\n// `act` call is returned from an async function without first being awaited,\n// since that's a somewhat common pattern. If you do this too many times in a\n// nested sequence, you might get a warning, but you can always fix by awaiting\n// the call.\n//\n// A macrotask would also work (and is the fallback) but depending on the test\n// environment it may cause the warning to fire too late.\nconst queueSeveralMicrotasks =\n  typeof queueMicrotask === 'function'\n    ? (callback: () => void) => {\n        queueMicrotask(() => queueMicrotask(callback));\n      }\n    : queueMacrotask;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {useMemoCache} from './ReactHooks';\n\nexport default {\n  c: useMemoCache,\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactVersion from 'shared/ReactVersion';\nimport {\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {Component, PureComponent} from './ReactBaseClasses';\nimport {createRef} from './ReactCreateRef';\nimport {forEach, map, count, toArray, only} from './ReactChildren';\nimport {\n  createElement,\n  cloneElement,\n  isValidElement,\n} from './jsx/ReactJSXElement';\nimport {createContext} from './ReactContext';\nimport {lazy} from './ReactLazy';\nimport {forwardRef} from './ReactForwardRef';\nimport {memo} from './ReactMemo';\nimport {cache} from './ReactCacheClient';\nimport {postpone} from './ReactPostpone';\nimport {\n  getCacheForType,\n  useCallback,\n  unstable_useContextWithBailout,\n  useContext,\n  useEffect,\n  useEffectEvent,\n  useResourceEffect,\n  useImperativeHandle,\n  useDebugValue,\n  useInsertionEffect,\n  useLayoutEffect,\n  useMemo,\n  useSyncExternalStore,\n  useReducer,\n  useRef,\n  useState,\n  useTransition,\n  useDeferredValue,\n  useId,\n  useCacheRefresh,\n  use,\n  useOptimistic,\n  useActionState,\n} from './ReactHooks';\nimport ReactSharedInternals from './ReactSharedInternalsClient';\nimport {startTransition} from './ReactStartTransition';\nimport {act} from './ReactAct';\nimport {captureOwnerStack} from './ReactOwnerStack';\nimport ReactCompilerRuntime from './ReactCompilerRuntime';\nimport {enableUseResourceEffectHook} from 'shared/ReactFeatureFlags';\n\nconst Children = {\n  map,\n  forEach,\n  count,\n  toArray,\n  only,\n};\n\nexport {\n  Children,\n  createRef,\n  Component,\n  PureComponent,\n  createContext,\n  forwardRef,\n  lazy,\n  memo,\n  cache,\n  postpone as unstable_postpone,\n  useCallback,\n  unstable_useContextWithBailout,\n  useContext,\n  useEffect,\n  useEffectEvent as experimental_useEffectEvent,\n  useImperativeHandle,\n  useDebugValue,\n  useInsertionEffect,\n  useLayoutEffect,\n  useMemo,\n  useOptimistic,\n  useActionState,\n  useSyncExternalStore,\n  useReducer,\n  useRef,\n  useState,\n  REACT_FRAGMENT_TYPE as Fragment,\n  REACT_PROFILER_TYPE as Profiler,\n  REACT_STRICT_MODE_TYPE as StrictMode,\n  REACT_DEBUG_TRACING_MODE_TYPE as unstable_DebugTracingMode,\n  REACT_SUSPENSE_TYPE as Suspense,\n  createElement,\n  cloneElement,\n  isValidElement,\n  ReactVersion as version,\n  ReactSharedInternals as __CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n  ReactCompilerRuntime as __COMPILER_RUNTIME,\n  // Concurrent Mode\n  useTransition,\n  startTransition,\n  useDeferredValue,\n  REACT_SUSPENSE_LIST_TYPE as unstable_SuspenseList,\n  REACT_LEGACY_HIDDEN_TYPE as unstable_LegacyHidden,\n  REACT_OFFSCREEN_TYPE as unstable_Activity,\n  getCacheForType as unstable_getCacheForType,\n  useCacheRefresh as unstable_useCacheRefresh,\n  use,\n  // enableScopeAPI\n  REACT_SCOPE_TYPE as unstable_Scope,\n  // enableTransitionTracing\n  REACT_TRACING_MARKER_TYPE as unstable_TracingMarker,\n  useId,\n  act, // DEV-only\n  captureOwnerStack, // DEV-only\n};\n\nexport const experimental_useResourceEffect: typeof useResourceEffect | void =\n  enableUseResourceEffectHook ? useResourceEffect : undefined;\n"],"names":["REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_CONSUMER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","ReactNoopUpdateQueue","isMounted","publicInstance","enqueueForceUpdate","callback","callerName","enqueueReplaceState","completeState","enqueueSetState","partialState","assign","Object","emptyObject","Component","props","context","updater","refs","prototype","isReactComponent","setState","Error","forceUpdate","ComponentDummy","PureComponent","pureComponentPrototype","constructor","isPureReactComponent","createRef","refObject","current","isArrayImpl","Array","isArray","a","ReactSharedInternals","H","A","T","S","hasOwnProperty","getOwner","hasValidRef","config","ref","undefined","hasValidKey","key","ReactElement","type","self","source","owner","debugStack","debugTask","refProp","element","$$typeof","createElement","children","propName","call","childrenLength","arguments","length","childArray","i","defaultProps","cloneAndReplaceKey","oldElement","newKey","clonedElement","cloneElement","isValidElement","object","SEPARATOR","SUBSEPARATOR","escape","escapeRegex","escaperLookup","escapedString","replace","match","userProvidedKeyEscapeRegex","escapeUserProvidedKey","text","getElementKey","index","toString","noop","resolveThenable","thenable","status","fulfilledValue","value","rejectedError","reason","then","pendingThenable","fulfilledThenable","error","rejectedThenable","mapIntoArray","array","escapedPrefix","nameSoFar","invokeCallback","payload","_payload","init","_init","child","mappedChild","childKey","escapedChildKey","c","newChild","push","nextName","subtreeCount","nextNamePrefix","iteratorFn","iterableChildren","step","ii","next","done","childrenString","String","keys","join","mapChildren","func","result","count","countChildren","n","forEachChildren","forEachFunc","forEachContext","apply","toArray","onlyChild","createContext","defaultValue","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","Uninitialized","Pending","Resolved","Rejected","lazyInitializer","_status","ctor","_result","moduleObject","resolved","rejected","pending","default","lazy","lazyType","forwardRef","render","elementType","memo","compare","noopCache","fn","cache","resolveDispatcher","dispatcher","useContext","Context","useState","initialState","useReducer","reducer","initialArg","useRef","initialValue","useEffect","create","deps","useInsertionEffect","useLayoutEffect","useCallback","useMemo","useImperativeHandle","useDebugValue","formatterFn","useTransition","useDeferredValue","useId","useSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","useCacheRefresh","use","usable","useMemoCache","size","useOptimistic","passthrough","useActionState","action","permalink","reportGlobalError","reportError","window","ErrorEvent","message","event","bubbles","cancelable","shouldLog","dispatchEvent","process","emit","console","startTransition","scope","options","prevTransition","currentTransition","returnValue","onStartTransitionFinish","act","Children","map","forEach","only"],"mappings":"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"}