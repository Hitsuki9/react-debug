{"version":3,"file":"scheduler-unstable_mock.development.js","sources":["../../../../packages/scheduler/src/SchedulerFeatureFlags.js","../../../../packages/scheduler/src/SchedulerMinHeap.js","../../../../packages/scheduler/src/SchedulerPriorities.js","../../../../packages/scheduler/src/SchedulerProfiling.js","../../../../packages/scheduler/src/forks/SchedulerMock.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\nexport const enableSchedulerDebugging = false;\nexport const enableProfiling = false;\nexport const frameYieldMs = 5;\n\nexport const userBlockingPriorityTimeout = 250;\nexport const normalPriorityTimeout = 5000;\nexport const lowPriorityTimeout = 10000;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\ntype Heap<T: Node> = Array<T>;\ntype Node = {\n  id: number,\n  sortIndex: number,\n  ...\n};\n\nexport function push<T: Node>(heap: Heap<T>, node: T): void {\n  const index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\n\nexport function peek<T: Node>(heap: Heap<T>): T | null {\n  return heap.length === 0 ? null : heap[0];\n}\n\nexport function pop<T: Node>(heap: Heap<T>): T | null {\n  if (heap.length === 0) {\n    return null;\n  }\n  const first = heap[0];\n  const last = heap.pop();\n  if (last !== first) {\n    // $FlowFixMe[incompatible-type]\n    heap[0] = last;\n    // $FlowFixMe[incompatible-call]\n    siftDown(heap, last, 0);\n  }\n  return first;\n}\n\nfunction siftUp<T: Node>(heap: Heap<T>, node: T, i: number): void {\n  let index = i;\n  while (index > 0) {\n    const parentIndex = (index - 1) >>> 1;\n    const parent = heap[parentIndex];\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown<T: Node>(heap: Heap<T>, node: T, i: number): void {\n  let index = i;\n  const length = heap.length;\n  const halfLength = length >>> 1;\n  while (index < halfLength) {\n    const leftIndex = (index + 1) * 2 - 1;\n    const left = heap[leftIndex];\n    const rightIndex = leftIndex + 1;\n    const right = heap[rightIndex];\n\n    // If the left or right node is smaller, swap with the smaller of those.\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a: Node, b: Node) {\n  // Compare sort index first, then task id.\n  const diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\nexport type PriorityLevel = 0 | 1 | 2 | 3 | 4 | 5;\n\n// TODO: Use symbols?\nexport const NoPriority = 0;\nexport const ImmediatePriority = 1;\nexport const UserBlockingPriority = 2;\nexport const NormalPriority = 3;\nexport const LowPriority = 4;\nexport const IdlePriority = 5;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {PriorityLevel} from './SchedulerPriorities';\nimport {enableProfiling} from './SchedulerFeatureFlags';\n\nlet runIdCounter: number = 0;\nlet mainThreadIdCounter: number = 0;\n\n// Bytes per element is 4\nconst INITIAL_EVENT_LOG_SIZE = 131072;\nconst MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\nlet eventLogSize = 0;\nlet eventLogBuffer = null;\nlet eventLog = null;\nlet eventLogIndex = 0;\n\nconst TaskStartEvent = 1;\nconst TaskCompleteEvent = 2;\nconst TaskErrorEvent = 3;\nconst TaskCancelEvent = 4;\nconst TaskRunEvent = 5;\nconst TaskYieldEvent = 6;\nconst SchedulerSuspendEvent = 7;\nconst SchedulerResumeEvent = 8;\n\nfunction logEvent(entries: Array<number | PriorityLevel>) {\n  if (eventLog !== null) {\n    const offset = eventLogIndex;\n    eventLogIndex += entries.length;\n    if (eventLogIndex + 1 > eventLogSize) {\n      eventLogSize *= 2;\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n        // Using console['error'] to evade Babel and ESLint\n        console['error'](\n          \"Scheduler Profiling: Event log exceeded maximum size. Don't \" +\n            'forget to call `stopLoggingProfilingEvents()`.',\n        );\n        stopLoggingProfilingEvents();\n        return;\n      }\n      const newEventLog = new Int32Array(eventLogSize * 4);\n      // $FlowFixMe[incompatible-call] found when upgrading Flow\n      newEventLog.set(eventLog);\n      eventLogBuffer = newEventLog.buffer;\n      eventLog = newEventLog;\n    }\n    eventLog.set(entries, offset);\n  }\n}\n\nexport function startLoggingProfilingEvents(): void {\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n  eventLog = new Int32Array(eventLogBuffer);\n  eventLogIndex = 0;\n}\n\nexport function stopLoggingProfilingEvents(): ArrayBuffer | null {\n  const buffer = eventLogBuffer;\n  eventLogSize = 0;\n  eventLogBuffer = null;\n  eventLog = null;\n  eventLogIndex = 0;\n  return buffer;\n}\n\nexport function markTaskStart(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      // performance.now returns a float, representing milliseconds. When the\n      // event is logged, it's coerced to an int. Convert to microseconds to\n      // maintain extra degrees of precision.\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n    }\n  }\n}\n\nexport function markTaskCompleted(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskCanceled(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskErrored(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskRun(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    runIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markTaskYield(task: {id: number, ...}, ms: number) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerSuspended(ms: number) {\n  if (enableProfiling) {\n    mainThreadIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerUnsuspended(ms: number) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-disable no-var */\n/* eslint-disable react-internal/prod-error-codes */\n\nimport type {PriorityLevel} from '../SchedulerPriorities';\n\nimport {\n  enableSchedulerDebugging,\n  enableProfiling,\n} from '../SchedulerFeatureFlags';\nimport {push, pop, peek} from '../SchedulerMinHeap';\n\n// TODO: Use symbols?\nimport {\n  ImmediatePriority,\n  UserBlockingPriority,\n  NormalPriority,\n  LowPriority,\n  IdlePriority,\n} from '../SchedulerPriorities';\nimport {\n  markTaskRun,\n  markTaskYield,\n  markTaskCompleted,\n  markTaskCanceled,\n  markTaskErrored,\n  markSchedulerSuspended,\n  markSchedulerUnsuspended,\n  markTaskStart,\n  stopLoggingProfilingEvents,\n  startLoggingProfilingEvents,\n} from '../SchedulerProfiling';\n\ntype Callback = boolean => ?Callback;\n\ntype Task = {\n  id: number,\n  callback: Callback | null,\n  priorityLevel: PriorityLevel,\n  startTime: number,\n  expirationTime: number,\n  sortIndex: number,\n  isQueued?: boolean,\n};\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar maxSigned31BitInt = 1073741823;\n\n// Times out immediately\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\n// Eventually times out\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000;\n// Never times out\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\n\n// Tasks are stored on a min heap\nvar taskQueue: Array<Task> = [];\nvar timerQueue: Array<Task> = [];\n\n// Incrementing id counter. Used to maintain insertion order.\nvar taskIdCounter = 1;\n\n// Pausing the scheduler is useful for debugging.\nvar isSchedulerPaused = false;\n\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority;\n\n// This is set while performing work, to prevent re-entrance.\nvar isPerformingWork = false;\n\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nlet currentMockTime: number = 0;\nlet scheduledCallback:\n  | null\n  | ((\n      hasTimeRemaining: boolean,\n      initialTime: DOMHighResTimeStamp | number,\n    ) => boolean) = null;\nlet scheduledTimeout: (number => void) | null = null;\nlet timeoutTime: number = -1;\nlet yieldedValues: Array<mixed> | null = null;\nlet expectedNumberOfYields: number = -1;\nlet didStop: boolean = false;\nlet isFlushing: boolean = false;\nlet needsPaint: boolean = false;\nlet shouldYieldForPaint: boolean = false;\n\nvar disableYieldValue = false;\n\nfunction setDisableYieldValue(newValue: boolean) {\n  disableYieldValue = newValue;\n}\n\nfunction advanceTimers(currentTime: number) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime: number) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      const firstTimer = peek(timerQueue);\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining: boolean, initialTime: number) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  }\n\n  // We'll need a host callback the next time work is scheduled.\n  isHostCallbackScheduled = false;\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          const currentTime = getCurrentTime();\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskErrored(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n    if (enableProfiling) {\n      const currentTime = getCurrentTime();\n      markSchedulerSuspended(currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining: boolean, initialTime: number): boolean {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n  while (\n    currentTask !== null &&\n    !(enableSchedulerDebugging && isSchedulerPaused)\n  ) {\n    if (\n      currentTask.expirationTime > currentTime &&\n      (!hasTimeRemaining || shouldYieldToHost())\n    ) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    const callback = currentTask.callback;\n    if (typeof callback === 'function') {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentTask.callback = null;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentPriorityLevel = currentTask.priorityLevel;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      if (enableProfiling) {\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        markTaskRun(currentTask, currentTime);\n      }\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n      if (typeof continuationCallback === 'function') {\n        // If a continuation is returned, immediately yield to the main thread\n        // regardless of how much time is left in the current time slice.\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        currentTask.callback = continuationCallback;\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskYield(currentTask, currentTime);\n        }\n        advanceTimers(currentTime);\n\n        if (shouldYieldForPaint) {\n          needsPaint = true;\n          return true;\n        } else {\n          // If `shouldYieldForPaint` is false, we keep flushing synchronously\n          // without yielding to the main thread. This is the behavior of the\n          // `toFlushAndYield` and `toFlushAndYieldThrough` testing helpers .\n        }\n      } else {\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskCompleted(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n        advanceTimers(currentTime);\n      }\n    } else {\n      pop(taskQueue);\n    }\n    currentTask = peek(taskQueue);\n  }\n  // Return whether there's additional work\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority<T>(\n  priorityLevel: PriorityLevel,\n  eventHandler: () => T,\n): T {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next<T>(eventHandler: () => T): T {\n  var priorityLevel;\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback<T: (...Array<mixed>) => mixed>(callback: T): T {\n  var parentPriorityLevel = currentPriorityLevel;\n  // $FlowFixMe[incompatible-return]\n  // $FlowFixMe[missing-this-annot]\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(\n  priorityLevel: PriorityLevel,\n  callback: Callback,\n  options?: {delay: number},\n): Task {\n  var currentTime = getCurrentTime();\n\n  var startTime;\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n\n  var newTask: Task = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1,\n  };\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      }\n      // Schedule a timeout.\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    }\n    // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode(): Task | null {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task: Task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      const currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  }\n\n  // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel(): PriorityLevel {\n  return currentPriorityLevel;\n}\n\nfunction requestHostCallback(callback: (boolean, number) => boolean) {\n  scheduledCallback = callback;\n}\n\nfunction requestHostTimeout(callback: number => void, ms: number) {\n  scheduledTimeout = callback;\n  timeoutTime = currentMockTime + ms;\n}\n\nfunction cancelHostTimeout(): void {\n  scheduledTimeout = null;\n  timeoutTime = -1;\n}\n\nfunction shouldYieldToHost(): boolean {\n  if (\n    (expectedNumberOfYields === 0 && yieldedValues === null) ||\n    (expectedNumberOfYields !== -1 &&\n      yieldedValues !== null &&\n      yieldedValues.length >= expectedNumberOfYields) ||\n    (shouldYieldForPaint && needsPaint)\n  ) {\n    // We yielded at least as many values as expected. Stop flushing.\n    didStop = true;\n    return true;\n  }\n  return false;\n}\n\nfunction getCurrentTime(): number {\n  return currentMockTime;\n}\n\nfunction forceFrameRate() {\n  // No-op\n}\n\nfunction reset() {\n  if (isFlushing) {\n    throw new Error('Cannot reset while already flushing work.');\n  }\n  currentMockTime = 0;\n  scheduledCallback = null;\n  scheduledTimeout = null;\n  timeoutTime = -1;\n  yieldedValues = null;\n  expectedNumberOfYields = -1;\n  didStop = false;\n  isFlushing = false;\n  needsPaint = false;\n}\n\n// Should only be used via an assertion helper that inspects the yielded values.\nfunction unstable_flushNumberOfYields(count: number): void {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    expectedNumberOfYields = count;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork && !didStop);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      expectedNumberOfYields = -1;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n}\n\nfunction unstable_flushUntilNextPaint(): false {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    shouldYieldForPaint = true;\n    needsPaint = false;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork && !didStop);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      shouldYieldForPaint = false;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n  return false;\n}\n\nfunction unstable_hasPendingWork(): boolean {\n  return scheduledCallback !== null;\n}\n\nfunction unstable_flushExpired() {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    isFlushing = true;\n    try {\n      const hasMoreWork = scheduledCallback(false, currentMockTime);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      isFlushing = false;\n    }\n  }\n}\n\nfunction unstable_flushAllWithoutAsserting(): boolean {\n  // Returns false if no work was flushed.\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n      return true;\n    } finally {\n      isFlushing = false;\n    }\n  } else {\n    return false;\n  }\n}\n\nfunction unstable_clearLog(): Array<mixed> {\n  if (yieldedValues === null) {\n    return [];\n  }\n  const values = yieldedValues;\n  yieldedValues = null;\n  return values;\n}\n\nfunction unstable_flushAll(): void {\n  if (yieldedValues !== null) {\n    throw new Error(\n      'Log is not empty. Assert on the log of yielded values before ' +\n        'flushing additional work.',\n    );\n  }\n  unstable_flushAllWithoutAsserting();\n  if (yieldedValues !== null) {\n    throw new Error(\n      'While flushing work, something yielded a value. Use an ' +\n        'assertion helper to assert on the log of yielded values, e.g. ' +\n        'expect(Scheduler).toFlushAndYield([...])',\n    );\n  }\n}\n\nfunction log(value: mixed): void {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any values yielding in the second pass.\n    return;\n  }\n  if (yieldedValues === null) {\n    yieldedValues = [value];\n  } else {\n    yieldedValues.push(value);\n  }\n}\n\nfunction unstable_advanceTime(ms: number) {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any time advancing in the second pass.\n    return;\n  }\n  currentMockTime += ms;\n  if (scheduledTimeout !== null && timeoutTime <= currentMockTime) {\n    scheduledTimeout(currentMockTime);\n    timeoutTime = -1;\n    scheduledTimeout = null;\n  }\n}\n\nfunction requestPaint() {\n  needsPaint = true;\n}\n\nexport {\n  ImmediatePriority as unstable_ImmediatePriority,\n  UserBlockingPriority as unstable_UserBlockingPriority,\n  NormalPriority as unstable_NormalPriority,\n  IdlePriority as unstable_IdlePriority,\n  LowPriority as unstable_LowPriority,\n  unstable_runWithPriority,\n  unstable_next,\n  unstable_scheduleCallback,\n  unstable_cancelCallback,\n  unstable_wrapCallback,\n  unstable_getCurrentPriorityLevel,\n  shouldYieldToHost as unstable_shouldYield,\n  requestPaint as unstable_requestPaint,\n  unstable_continueExecution,\n  unstable_pauseExecution,\n  unstable_getFirstCallbackNode,\n  getCurrentTime as unstable_now,\n  forceFrameRate as unstable_forceFrameRate,\n  unstable_flushAllWithoutAsserting,\n  unstable_flushNumberOfYields,\n  unstable_flushExpired,\n  unstable_clearLog,\n  unstable_flushUntilNextPaint,\n  unstable_hasPendingWork,\n  unstable_flushAll,\n  log,\n  unstable_advanceTime,\n  reset,\n  setDisableYieldValue as unstable_setDisableYieldValue,\n};\n\nexport const unstable_Profiling: {\n  startLoggingProfilingEvents(): void,\n  stopLoggingProfilingEvents(): ArrayBuffer | null,\n} | null = enableProfiling\n  ? {\n      startLoggingProfilingEvents,\n      stopLoggingProfilingEvents,\n    }\n  : null;\n"],"names":["enableSchedulerDebugging","enableProfiling","push","heap","node","index","length","siftUp","peek","pop","first","last","siftDown","i","parentIndex","parent","compare","halfLength","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","ms","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","currentMockTime","scheduledCallback","scheduledTimeout","timeoutTime","yieldedValues","expectedNumberOfYields","didStop","isFlushing","needsPaint","shouldYieldForPaint","disableYieldValue","setDisableYieldValue","newValue","advanceTimers","currentTime","timer","callback","startTime","expirationTime","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","initialTime","cancelHostTimeout","previousPriorityLevel","workLoop","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","getCurrentTime","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","forceFrameRate","reset","Error","unstable_flushNumberOfYields","count","cb","hasMoreWork","unstable_flushUntilNextPaint","unstable_hasPendingWork","unstable_flushExpired","unstable_flushAllWithoutAsserting","unstable_clearLog","values","unstable_flushAll","log","value","console","name","unstable_advanceTime","requestPaint","unstable_Profiling"],"mappings":"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"}