{"version":3,"file":"scheduler.production.min.js","sources":["../../../../packages/scheduler/src/SchedulerFeatureFlags.js","../../../../packages/scheduler/src/SchedulerMinHeap.js","../../../../packages/scheduler/src/SchedulerPriorities.js","../../../../packages/scheduler/src/SchedulerProfiling.js","../../../../packages/scheduler/src/forks/Scheduler.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\nexport const enableSchedulerDebugging = false;\nexport const enableIsInputPending = false;\nexport const enableProfiling = false;\nexport const enableIsInputPendingContinuous = false;\nexport const frameYieldMs = 5;\nexport const continuousYieldMs = 50;\nexport const maxYieldMs = 300;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\ntype Heap<T: Node> = Array<T>;\ntype Node = {\n  id: number,\n  sortIndex: number,\n  ...\n};\n\nexport function push<T: Node>(heap: Heap<T>, node: T): void {\n  const index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\n\nexport function peek<T: Node>(heap: Heap<T>): T | null {\n  return heap.length === 0 ? null : heap[0];\n}\n\nexport function pop<T: Node>(heap: Heap<T>): T | null {\n  if (heap.length === 0) {\n    return null;\n  }\n  const first = heap[0];\n  const last = heap.pop();\n  if (last !== first) {\n    heap[0] = last;\n    siftDown(heap, last, 0);\n  }\n  return first;\n}\n\nfunction siftUp<T: Node>(heap: Heap<T>, node: T, i: number): void {\n  let index = i;\n  while (index > 0) {\n    const parentIndex = (index - 1) >>> 1;\n    const parent = heap[parentIndex];\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown<T: Node>(heap: Heap<T>, node: T, i: number): void {\n  let index = i;\n  const length = heap.length;\n  const halfLength = length >>> 1;\n  while (index < halfLength) {\n    const leftIndex = (index + 1) * 2 - 1;\n    const left = heap[leftIndex];\n    const rightIndex = leftIndex + 1;\n    const right = heap[rightIndex];\n\n    // If the left or right node is smaller, swap with the smaller of those.\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a: Node, b: Node) {\n  // Compare sort index first, then task id.\n  const diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\nexport type PriorityLevel = 0 | 1 | 2 | 3 | 4 | 5;\n\n// TODO: Use symbols?\nexport const NoPriority = 0;\nexport const ImmediatePriority = 1;\nexport const UserBlockingPriority = 2;\nexport const NormalPriority = 3;\nexport const LowPriority = 4;\nexport const IdlePriority = 5;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {PriorityLevel} from './SchedulerPriorities';\nimport {enableProfiling} from './SchedulerFeatureFlags';\n\nlet runIdCounter: number = 0;\nlet mainThreadIdCounter: number = 0;\n\n// Bytes per element is 4\nconst INITIAL_EVENT_LOG_SIZE = 131072;\nconst MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\nlet eventLogSize = 0;\nlet eventLogBuffer = null;\nlet eventLog = null;\nlet eventLogIndex = 0;\n\nconst TaskStartEvent = 1;\nconst TaskCompleteEvent = 2;\nconst TaskErrorEvent = 3;\nconst TaskCancelEvent = 4;\nconst TaskRunEvent = 5;\nconst TaskYieldEvent = 6;\nconst SchedulerSuspendEvent = 7;\nconst SchedulerResumeEvent = 8;\n\nfunction logEvent(entries: Array<number | PriorityLevel>) {\n  if (eventLog !== null) {\n    const offset = eventLogIndex;\n    eventLogIndex += entries.length;\n    if (eventLogIndex + 1 > eventLogSize) {\n      eventLogSize *= 2;\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n        // Using console['error'] to evade Babel and ESLint\n        console['error'](\n          \"Scheduler Profiling: Event log exceeded maximum size. Don't \" +\n            'forget to call `stopLoggingProfilingEvents()`.',\n        );\n        stopLoggingProfilingEvents();\n        return;\n      }\n      const newEventLog = new Int32Array(eventLogSize * 4);\n      // $FlowFixMe[incompatible-call] found when upgrading Flow\n      newEventLog.set(eventLog);\n      eventLogBuffer = newEventLog.buffer;\n      eventLog = newEventLog;\n    }\n    eventLog.set(entries, offset);\n  }\n}\n\nexport function startLoggingProfilingEvents(): void {\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n  eventLog = new Int32Array(eventLogBuffer);\n  eventLogIndex = 0;\n}\n\nexport function stopLoggingProfilingEvents(): ArrayBuffer | null {\n  const buffer = eventLogBuffer;\n  eventLogSize = 0;\n  eventLogBuffer = null;\n  eventLog = null;\n  eventLogIndex = 0;\n  return buffer;\n}\n\nexport function markTaskStart(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      // performance.now returns a float, representing milliseconds. When the\n      // event is logged, it's coerced to an int. Convert to microseconds to\n      // maintain extra degrees of precision.\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n    }\n  }\n}\n\nexport function markTaskCompleted(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskCanceled(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskErrored(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskRun(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    runIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markTaskYield(task: {id: number, ...}, ms: number) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerSuspended(ms: number) {\n  if (enableProfiling) {\n    mainThreadIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerUnsuspended(ms: number) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-disable no-var */\n\nimport type {PriorityLevel} from '../SchedulerPriorities';\n\nimport {\n  enableSchedulerDebugging,\n  enableProfiling,\n  enableIsInputPending,\n  enableIsInputPendingContinuous,\n  frameYieldMs,\n  continuousYieldMs,\n  maxYieldMs,\n} from '../SchedulerFeatureFlags';\n\nimport {push, pop, peek} from '../SchedulerMinHeap';\n\n// TODO: Use symbols?\nimport {\n  ImmediatePriority,\n  UserBlockingPriority,\n  NormalPriority,\n  LowPriority,\n  IdlePriority,\n} from '../SchedulerPriorities';\nimport {\n  markTaskRun,\n  markTaskYield,\n  markTaskCompleted,\n  markTaskCanceled,\n  markTaskErrored,\n  markSchedulerSuspended,\n  markSchedulerUnsuspended,\n  markTaskStart,\n  stopLoggingProfilingEvents,\n  startLoggingProfilingEvents,\n} from '../SchedulerProfiling';\n\nexport type Callback = boolean => ?Callback;\n\ntype Task = {\n  id: number,\n  callback: Callback | null,\n  priorityLevel: PriorityLevel,\n  startTime: number,\n  expirationTime: number,\n  sortIndex: number,\n  isQueued?: boolean,\n};\n\nlet getCurrentTime: () => number | DOMHighResTimeStamp;\nconst hasPerformanceNow =\n  // $FlowFixMe[method-unbinding]\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  const localPerformance = performance;\n  getCurrentTime = () => localPerformance.now();\n} else {\n  const localDate = Date;\n  const initialTime = localDate.now();\n  getCurrentTime = () => localDate.now() - initialTime;\n}\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar maxSigned31BitInt = 1073741823;\n\n// Times out immediately\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\n// Eventually times out\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000;\n// Never times out\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\n\n// Tasks are stored on a min heap\nvar taskQueue: Array<Task> = [];\nvar timerQueue: Array<Task> = [];\n\n// Incrementing id counter. Used to maintain insertion order.\nvar taskIdCounter = 1;\n\n// Pausing the scheduler is useful for debugging.\nvar isSchedulerPaused = false;\n\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority;\n\n// This is set while performing work, to prevent re-entrance.\nvar isPerformingWork = false;\n\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\n// Capture local references to native APIs, in case a polyfill overrides them.\nconst localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\nconst localClearTimeout =\n  typeof clearTimeout === 'function' ? clearTimeout : null;\nconst localSetImmediate =\n  typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\nconst isInputPending =\n  typeof navigator !== 'undefined' &&\n  // $FlowFixMe[prop-missing]\n  navigator.scheduling !== undefined &&\n  // $FlowFixMe[incompatible-type]\n  navigator.scheduling.isInputPending !== undefined\n    ? navigator.scheduling.isInputPending.bind(navigator.scheduling)\n    : null;\n\nconst continuousOptions = {includeContinuous: enableIsInputPendingContinuous};\n\nfunction advanceTimers(currentTime: number) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime: number) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      const firstTimer = peek(timerQueue);\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining: boolean, initialTime: number) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  }\n\n  // We'll need a host callback the next time work is scheduled.\n  isHostCallbackScheduled = false;\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          const currentTime = getCurrentTime();\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskErrored(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n    if (enableProfiling) {\n      const currentTime = getCurrentTime();\n      markSchedulerSuspended(currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining: boolean, initialTime: number) {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n  while (\n    currentTask !== null &&\n    !(enableSchedulerDebugging && isSchedulerPaused)\n  ) {\n    if (\n      currentTask.expirationTime > currentTime &&\n      (!hasTimeRemaining || shouldYieldToHost())\n    ) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    const callback = currentTask.callback;\n    if (typeof callback === 'function') {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentTask.callback = null;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentPriorityLevel = currentTask.priorityLevel;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      if (enableProfiling) {\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        markTaskRun(currentTask, currentTime);\n      }\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n      if (typeof continuationCallback === 'function') {\n        // If a continuation is returned, immediately yield to the main thread\n        // regardless of how much time is left in the current time slice.\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        currentTask.callback = continuationCallback;\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskYield(currentTask, currentTime);\n        }\n        advanceTimers(currentTime);\n        return true;\n      } else {\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskCompleted(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n        advanceTimers(currentTime);\n      }\n    } else {\n      pop(taskQueue);\n    }\n    currentTask = peek(taskQueue);\n  }\n  // Return whether there's additional work\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority<T>(\n  priorityLevel: PriorityLevel,\n  eventHandler: () => T,\n): T {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next<T>(eventHandler: () => T): T {\n  var priorityLevel;\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback<T: (...Array<mixed>) => mixed>(callback: T): T {\n  var parentPriorityLevel = currentPriorityLevel;\n  // $FlowFixMe[incompatible-return]\n  return function() {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(\n  priorityLevel: PriorityLevel,\n  callback: Callback,\n  options?: {delay: number},\n): Task {\n  var currentTime = getCurrentTime();\n\n  var startTime;\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n\n  var newTask: Task = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1,\n  };\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      }\n      // Schedule a timeout.\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    }\n    // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode(): Task | null {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task: Task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      const currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  }\n\n  // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel(): PriorityLevel {\n  return currentPriorityLevel;\n}\n\nlet isMessageLoopRunning = false;\nlet scheduledHostCallback:\n  | null\n  | ((\n      hasTimeRemaining: boolean,\n      initialTime: DOMHighResTimeStamp | number,\n    ) => boolean) = null;\nlet taskTimeoutID: TimeoutID = (-1: any);\n\n// Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\nlet frameInterval = frameYieldMs;\nconst continuousInputInterval = continuousYieldMs;\nconst maxInterval = maxYieldMs;\nlet startTime = -1;\n\nlet needsPaint = false;\n\nfunction shouldYieldToHost(): boolean {\n  const timeElapsed = getCurrentTime() - startTime;\n  if (timeElapsed < frameInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  }\n\n  // The main thread has been blocked for a non-negligible amount of time. We\n  // may want to yield control of the main thread, so the browser can perform\n  // high priority tasks. The main ones are painting and user input. If there's\n  // a pending paint or a pending input, then we should yield. But if there's\n  // neither, then we can yield less often while remaining responsive. We'll\n  // eventually yield regardless, since there could be a pending paint that\n  // wasn't accompanied by a call to `requestPaint`, or other main thread tasks\n  // like network events.\n  if (enableIsInputPending) {\n    if (needsPaint) {\n      // There's a pending paint (signaled by `requestPaint`). Yield now.\n      return true;\n    }\n    if (timeElapsed < continuousInputInterval) {\n      // We haven't blocked the thread for that long. Only yield if there's a\n      // pending discrete input (e.g. click). It's OK if there's pending\n      // continuous input (e.g. mouseover).\n      if (isInputPending !== null) {\n        return isInputPending();\n      }\n    } else if (timeElapsed < maxInterval) {\n      // Yield if there's either a pending discrete or continuous input.\n      if (isInputPending !== null) {\n        return isInputPending(continuousOptions);\n      }\n    } else {\n      // We've blocked the thread for a long time. Even if there's no pending\n      // input, there may be some other scheduled work that we don't know about,\n      // like a network event. Yield now.\n      return true;\n    }\n  }\n\n  // `isInputPending` isn't available. Yield now.\n  return true;\n}\n\nfunction requestPaint() {\n  if (\n    enableIsInputPending &&\n    navigator !== undefined &&\n    // $FlowFixMe[prop-missing]\n    navigator.scheduling !== undefined &&\n    // $FlowFixMe[incompatible-type]\n    navigator.scheduling.isInputPending !== undefined\n  ) {\n    needsPaint = true;\n  }\n\n  // Since we yield every frame regardless, `requestPaint` has no effect.\n}\n\nfunction forceFrameRate(fps: number) {\n  if (fps < 0 || fps > 125) {\n    // Using console['error'] to evade Babel and ESLint\n    console['error'](\n      'forceFrameRate takes a positive int between 0 and 125, ' +\n        'forcing frame rates higher than 125 fps is not supported',\n    );\n    return;\n  }\n  if (fps > 0) {\n    frameInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    frameInterval = frameYieldMs;\n  }\n}\n\nconst performWorkUntilDeadline = () => {\n  if (scheduledHostCallback !== null) {\n    const currentTime = getCurrentTime();\n    // Keep track of the start time so we can measure how long the main thread\n    // has been blocked.\n    startTime = currentTime;\n    const hasTimeRemaining = true;\n\n    // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\n    let hasMoreWork = true;\n    try {\n      // $FlowFixMe[not-a-function] found when upgrading Flow\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n        scheduledHostCallback = null;\n      }\n    }\n  } else {\n    isMessageLoopRunning = false;\n  }\n  // Yielding to the browser will give it a chance to paint, so we can\n  // reset this.\n  needsPaint = false;\n};\n\nlet schedulePerformWorkUntilDeadline;\nif (typeof localSetImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = () => {\n    localSetImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof MessageChannel !== 'undefined') {\n  // DOM and Worker environments.\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n  const channel = new MessageChannel();\n  const port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n  schedulePerformWorkUntilDeadline = () => {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = () => {\n    // $FlowFixMe[not-a-function] nullable value\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback(callback) {\n  scheduledHostCallback = callback;\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(callback, ms: number) {\n  // $FlowFixMe[not-a-function] nullable value\n  taskTimeoutID = localSetTimeout(() => {\n    callback(getCurrentTime());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  // $FlowFixMe[not-a-function] nullable value\n  localClearTimeout(taskTimeoutID);\n  taskTimeoutID = ((-1: any): TimeoutID);\n}\n\nexport {\n  ImmediatePriority as unstable_ImmediatePriority,\n  UserBlockingPriority as unstable_UserBlockingPriority,\n  NormalPriority as unstable_NormalPriority,\n  IdlePriority as unstable_IdlePriority,\n  LowPriority as unstable_LowPriority,\n  unstable_runWithPriority,\n  unstable_next,\n  unstable_scheduleCallback,\n  unstable_cancelCallback,\n  unstable_wrapCallback,\n  unstable_getCurrentPriorityLevel,\n  shouldYieldToHost as unstable_shouldYield,\n  requestPaint as unstable_requestPaint,\n  unstable_continueExecution,\n  unstable_pauseExecution,\n  unstable_getFirstCallbackNode,\n  getCurrentTime as unstable_now,\n  forceFrameRate as unstable_forceFrameRate,\n};\n\nexport const unstable_Profiling: {\n  startLoggingProfilingEvents(): void,\n  stopLoggingProfilingEvents(): ArrayBuffer | null,\n} | null = enableProfiling\n  ? {\n      startLoggingProfilingEvents,\n      stopLoggingProfilingEvents,\n    }\n  : null;\n"],"names":["enableSchedulerDebugging","enableProfiling","frameYieldMs","push","heap","node","index","length","siftUp","peek","pop","first","last","siftDown","i","parentIndex","parent","compare","halfLength","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","ms","hasPerformanceNow","performance","now","localPerformance","getCurrentTime","localDate","Date","initialTime","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","localSetTimeout","setTimeout","localClearTimeout","clearTimeout","localSetImmediate","setImmediate","isInputPending","navigator","scheduling","undefined","bind","advanceTimers","currentTime","timer","callback","startTime","expirationTime","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","cancelHostTimeout","previousPriorityLevel","workLoop","error","isQueued","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_pauseExecution","isSchedulerPaused","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","isMessageLoopRunning","scheduledHostCallback","taskTimeoutID","frameInterval","timeElapsed","requestPaint","forceFrameRate","fps","console","Math","floor","performWorkUntilDeadline","hasMoreWork","schedulePerformWorkUntilDeadline","MessageChannel","channel","port","port2","port1","onmessage","postMessage","unstable_Profiling"],"mappings":"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"}