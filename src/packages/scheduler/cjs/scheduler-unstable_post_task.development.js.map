{"version":3,"file":"scheduler-unstable_post_task.development.js","sources":["../../../../packages/scheduler/src/SchedulerPriorities.js","../../../../packages/scheduler/src/forks/SchedulerPostTask.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\nexport type PriorityLevel = 0 | 1 | 2 | 3 | 4 | 5;\n\n// TODO: Use symbols?\nexport const NoPriority = 0;\nexport const ImmediatePriority = 1;\nexport const UserBlockingPriority = 2;\nexport const NormalPriority = 3;\nexport const LowPriority = 4;\nexport const IdlePriority = 5;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {PriorityLevel} from '../SchedulerPriorities';\n\ndeclare class TaskController {\n  constructor(priority?: string): TaskController;\n  signal: mixed;\n  abort(): void;\n}\n\ntype PostTaskPriorityLevel = 'user-blocking' | 'user-visible' | 'background';\n\ntype CallbackNode = {\n  _controller: TaskController,\n};\n\nimport {\n  ImmediatePriority,\n  UserBlockingPriority,\n  NormalPriority,\n  LowPriority,\n  IdlePriority,\n} from '../SchedulerPriorities';\n\nexport {\n  ImmediatePriority as unstable_ImmediatePriority,\n  UserBlockingPriority as unstable_UserBlockingPriority,\n  NormalPriority as unstable_NormalPriority,\n  IdlePriority as unstable_IdlePriority,\n  LowPriority as unstable_LowPriority,\n};\n\n// Capture local references to native APIs, in case a polyfill overrides them.\nconst perf = window.performance;\nconst setTimeout = window.setTimeout;\n\n// Use experimental Chrome Scheduler postTask API.\nconst scheduler = global.scheduler;\n\nconst getCurrentTime: () => DOMHighResTimeStamp = perf.now.bind(perf);\n\nexport const unstable_now = getCurrentTime;\n\n// Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\nconst yieldInterval = 5;\nlet deadline = 0;\n\nlet currentPriorityLevel_DEPRECATED = NormalPriority;\n\n// `isInputPending` is not available. Since we have no way of knowing if\n// there's pending input, always yield at the end of the frame.\nexport function unstable_shouldYield(): boolean {\n  return getCurrentTime() >= deadline;\n}\n\nexport function unstable_requestPaint() {\n  // Since we yield every frame regardless, `requestPaint` has no effect.\n}\n\ntype SchedulerCallback<T> = (\n  didTimeout_DEPRECATED: boolean,\n) =>\n  | T\n  // May return a continuation\n  | SchedulerCallback<T>;\n\nexport function unstable_scheduleCallback<T>(\n  priorityLevel: PriorityLevel,\n  callback: SchedulerCallback<T>,\n  options?: {delay?: number},\n): CallbackNode {\n  let postTaskPriority;\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n      postTaskPriority = 'user-blocking';\n      break;\n    case LowPriority:\n    case NormalPriority:\n      postTaskPriority = 'user-visible';\n      break;\n    case IdlePriority:\n      postTaskPriority = 'background';\n      break;\n    default:\n      postTaskPriority = 'user-visible';\n      break;\n  }\n\n  const controller = new TaskController();\n  const postTaskOptions = {\n    priority: postTaskPriority,\n    delay: typeof options === 'object' && options !== null ? options.delay : 0,\n    signal: controller.signal,\n  };\n\n  const node = {\n    _controller: controller,\n  };\n\n  scheduler\n    .postTask(\n      runTask.bind(null, priorityLevel, postTaskPriority, node, callback),\n      postTaskOptions,\n    )\n    .catch(handleAbortError);\n\n  return node;\n}\n\nfunction runTask<T>(\n  priorityLevel: PriorityLevel,\n  postTaskPriority: PostTaskPriorityLevel,\n  node: CallbackNode,\n  callback: SchedulerCallback<T>,\n) {\n  deadline = getCurrentTime() + yieldInterval;\n  try {\n    currentPriorityLevel_DEPRECATED = priorityLevel;\n    const didTimeout_DEPRECATED = false;\n    const result = callback(didTimeout_DEPRECATED);\n    if (typeof result === 'function') {\n      // Assume this is a continuation\n      const continuation: SchedulerCallback<T> = (result: any);\n      const continuationController = new TaskController();\n      const continuationOptions = {\n        priority: postTaskPriority,\n        signal: continuationController.signal,\n      };\n      // Update the original callback node's controller, since even though we're\n      // posting a new task, conceptually it's the same one.\n      node._controller = continuationController;\n      scheduler\n        .postTask(\n          runTask.bind(\n            null,\n            priorityLevel,\n            postTaskPriority,\n            node,\n            continuation,\n          ),\n          continuationOptions,\n        )\n        .catch(handleAbortError);\n    }\n  } catch (error) {\n    // We're inside a `postTask` promise. If we don't handle this error, then it\n    // will trigger an \"Unhandled promise rejection\" error. We don't want that,\n    // but we do want the default error reporting behavior that normal\n    // (non-Promise) tasks get for unhandled errors.\n    //\n    // So we'll re-throw the error inside a regular browser task.\n    setTimeout(() => {\n      throw error;\n    });\n  } finally {\n    currentPriorityLevel_DEPRECATED = NormalPriority;\n  }\n}\n\nfunction handleAbortError(error) {\n  // Abort errors are an implementation detail. We don't expose the\n  // TaskController to the user, nor do we expose the promise that is returned\n  // from `postTask`. So we should suppress them, since there's no way for the\n  // user to handle them.\n}\n\nexport function unstable_cancelCallback(node: CallbackNode) {\n  const controller = node._controller;\n  controller.abort();\n}\n\nexport function unstable_runWithPriority<T>(\n  priorityLevel: PriorityLevel,\n  callback: () => T,\n): T {\n  const previousPriorityLevel = currentPriorityLevel_DEPRECATED;\n  currentPriorityLevel_DEPRECATED = priorityLevel;\n  try {\n    return callback();\n  } finally {\n    currentPriorityLevel_DEPRECATED = previousPriorityLevel;\n  }\n}\n\nexport function unstable_getCurrentPriorityLevel(): PriorityLevel {\n  return currentPriorityLevel_DEPRECATED;\n}\n\nexport function unstable_next<T>(callback: () => T): T {\n  let priorityLevel;\n  switch (currentPriorityLevel_DEPRECATED) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel_DEPRECATED;\n      break;\n  }\n\n  const previousPriorityLevel = currentPriorityLevel_DEPRECATED;\n  currentPriorityLevel_DEPRECATED = priorityLevel;\n  try {\n    return callback();\n  } finally {\n    currentPriorityLevel_DEPRECATED = previousPriorityLevel;\n  }\n}\n\nexport function unstable_wrapCallback<T>(callback: () => T): () => T {\n  const parentPriorityLevel = currentPriorityLevel_DEPRECATED;\n  return () => {\n    const previousPriorityLevel = currentPriorityLevel_DEPRECATED;\n    currentPriorityLevel_DEPRECATED = parentPriorityLevel;\n    try {\n      return callback();\n    } finally {\n      currentPriorityLevel_DEPRECATED = previousPriorityLevel;\n    }\n  };\n}\n\nexport function unstable_forceFrameRate() {}\n\nexport function unstable_pauseExecution() {}\n\nexport function unstable_continueExecution() {}\n\nexport function unstable_getFirstCallbackNode(): null {\n  return null;\n}\n\n// Currently no profiling build\nexport const unstable_Profiling = null;\n"],"names":["ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","perf","window","performance","setTimeout","scheduler","global","getCurrentTime","now","bind","unstable_now","yieldInterval","deadline","currentPriorityLevel_DEPRECATED","unstable_shouldYield","unstable_requestPaint","unstable_scheduleCallback","priorityLevel","callback","options","postTaskPriority","controller","TaskController","postTaskOptions","priority","delay","signal","node","_controller","postTask","runTask","catch","handleAbortError","didTimeout_DEPRECATED","result","continuation","continuationController","continuationOptions","error","unstable_cancelCallback","abort","unstable_runWithPriority","previousPriorityLevel","unstable_getCurrentPriorityLevel","unstable_next","unstable_wrapCallback","parentPriorityLevel","unstable_forceFrameRate","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_Profiling"],"mappings":"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"}